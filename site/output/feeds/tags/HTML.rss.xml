<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>joe di castro</title><link>http://joedicastro.com</link><description></description><atom:link href="http://joedicastro.com/feeds/tags/HTML.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 28 Jun 2011 23:54:00 -0000</lastBuildDate><item><title>Pelican - Publicación y automatización</title><link>http://joedicastro.com/pelican-publicacion-y-automatizacion.html</link><description>&lt;p&gt;Una vez que sabemos como &lt;a href="/pelican-introduccion-e-instalacion.html"&gt;instalar Pelican&lt;/a&gt; y &lt;a href="/pelican-creacion-de-contenido.html"&gt;crear contenido&lt;/a&gt; con él, es 
hora de saber como convertir ese contenido en un blog real disponible en 
internet. Es decir, saber como publicar ese contenido. Como hemos visto hasta 
ahora, al constar básicamente de simples ficheros HTML, un servidor de 
archivos es más que suficiente para servir el blog. Esto nos abre un gran 
abanico de posibilidades, desde emplear un potente (y barato) servidor de 
ficheros en la &lt;em&gt;nube&lt;/em&gt; como &lt;strong&gt;Amazon S3&lt;/strong&gt; (&lt;a href="http://jdacpelican.s3-website-us-east-1.amazonaws.com/"&gt;un ejemplo&lt;/a&gt;), pasando por las 
páginas web estáticas que nos permiten repositorios como &lt;strong&gt;Bitbucket&lt;/strong&gt; o 
&lt;strong&gt;GitHub&lt;/strong&gt; (&lt;a href="http://marsam.github.com/blog/"&gt;un ejemplo&lt;/a&gt;), por los tradiciones hostings compartidos (e.g. 
este blog), hasta un servidor casero sencillo montado sobre un &lt;a href="http://es.wikipedia.org/wiki/Network-attached_storage"&gt;NAS&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Aún cuando es posible emplear un simple servidor de archivos para alojar el blog, 
siempre es mejor contar con un servidor web detrás (Apache, nginx, lighttpd, 
...) que nos permita hacer redirecciones para nuestras antiguas páginas si ya 
disponíamos de un blog anterior o manejar los errores HTTP &lt;a href="http://es.wikipedia.org/wiki/Error_404"&gt;404&lt;/a&gt; o &lt;a href="http://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP"&gt;403&lt;/a&gt; 
de forma personalizada. &lt;/p&gt;
&lt;h3 id="publicar_el_contenido"&gt;Publicar el contenido&lt;/h3&gt;
&lt;p&gt;Publicar el contenido de una web es tan sencillo como volcar el contenido del 
directorio que nos genera Pelican (en nuestro ejemplo sería 
&lt;em&gt;myblog.com/site/output/*&lt;/em&gt;) en el directorio destino de nuestro servidor web. 
Dependiendo del método que hayamos elegido para alojar nuestro blog, puede ser 
tan sencillo como una copia de archivos o emplear FTP (SFTP) ó &lt;a href="http://es.wikipedia.org/wiki/SSH"&gt;SSH&lt;/a&gt; (&lt;a href="http://es.wikipedia.org/wiki/SCP"&gt;SCP&lt;/a&gt;, 
&lt;a href="http://en.wikipedia.org/wiki/Unison_%28file_synchronizer%29"&gt;Unison&lt;/a&gt; ó &lt;a href="http://es.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt;). Aquí el tema radica no en la primera vez que 
vayamos a subir el contenido al servidor, si no en las sucesivas, a medida que 
vayamos creando contenido nuevo. No tendría ningún sentido volver a subir todo 
el contenido cada vez, si no solamente el nuevo o el que haya cambiado. Para eso 
necesitamos sincronizar los dos directorios. &lt;/p&gt;
&lt;p&gt;Si solamente disponemos de acceso FTP (o SFTP) a nuestro servidor, entonces 
tendremos que emplear una herramienta que nos permita la sincronización sobre 
FTP, como puede ser &lt;strong&gt;lftp&lt;/strong&gt;. Y el proceso se puede automatizar con un script 
como el que describo en &lt;a href="/sincronizar-una-carpeta-local-y-una-remota-a-traves-de-ftp-lftp-mirror.html"&gt;Sincronizar una carpeta local y una remota a través de 
FTP: lftp-mirror&lt;/a&gt;. Si disponemos de acceso a través de SSH, entonces la 
elección es clarisima, &lt;strong&gt;rsync&lt;/strong&gt;. Más adelante explico una manera de emplearlo 
de forma automática.&lt;/p&gt;
&lt;p&gt;Cualquiera de ambas soluciones nos permite subir el contenido en apenas segundos, 
(sobre todo en el caso de rsync) cuando se trata de añadir un articulo nuevo, 
por ejemplo. Y lo mismo a la hora de hacer una rectificación, es tan inmediato 
como lo pueden ser plataformas como Wordpress, Drupal y similares. Además, con 
las potentes herramientas que existen para hacer cambios múltiples en varios 
ficheros de texto a la vez, se pueden realizar tareas casi imposibles con una 
plataforma de blogs tradicional sin recurrir a consultas SQL en la BDD o a 
plugins externos. Una de estas herramientas, sin recurrir a &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, 
&lt;code&gt;awk&lt;/code&gt; y &lt;code&gt;sed&lt;/code&gt;, puede ser &lt;a href="http://regexxer.sourceforge.net/"&gt;regexxer&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="generar_el_contenido_en_el_propio_servidor"&gt;Generar el contenido en el propio servidor&lt;/h3&gt;
&lt;p&gt;Si el alojamiento que hemos escogido nos permite instalar programas python, 
entonces tenemos la posibilidad de instalar Pelican en el servidor remoto. De 
esta formar podríamos subir únicamente los archivos markdown o reStructuredText 
al servidor y generar allí mismo el contenido web. De este modo la cantidad de 
datos a subir sería ridícula y un simple comando FTP nos serviría. Luego bien 
podríamos lanzar Pelican a través de una consola SSH o bien dependiendo del 
servidor, tener un &lt;a href="http://es.wikipedia.org/wiki/Demonio_%28inform%C3%A1tica%29"&gt;demonio&lt;/a&gt; corriendo que cuando detectara un cambio en el 
sistema de ficheros lanzará un script que generara el contenido con Pelican. &lt;/p&gt;
&lt;p&gt;Otra posibilidad que me convence más, es de la poder instalar un repositorio en 
el servidor con un software de control de versiones, como Git o Mercurial. La 
idea sería tener un repositorio local, y al hacer un push hacia el repositorio 
remoto, a través de un &lt;em&gt;hook&lt;/em&gt; activar la generación de la página con Pelican. 
Esto nos permitiría además poder tener varias copias del repositorio (por 
ejemplo en GitHub o Bitbucket) y por lo tanto de la web, haciendo "innecesarias" 
las copias de seguridad. &lt;/p&gt;
&lt;h3 id="automatizar_todos_los_procesos"&gt;Automatizar todos los procesos&lt;/h3&gt;
&lt;p&gt;Pero lo ideal es poder automatizar todas las tareas que hemos visto hasta ahora, 
empleando unos pocos comandos para realizarlas sin esfuerzo alguno (bueno, 
a menos que tengas tú &lt;a href="http://es.wikipedia.org/wiki/Negro_%28escritor%29"&gt;ghostwriter&lt;/a&gt; particular, me temo que los artículos los 
seguirás teniendo que escribir tú). Para poder realizar esto disponemos de la 
fantástica y potente herramienta &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt; (el &lt;a href="http://en.wikipedia.org/wiki/Capistrano"&gt;Capistrano&lt;/a&gt; para Python) 
que nos permite ejecutar comandos locales o remotos en múltiples servidores. Esto 
nos permite hacer despliegues de software sin apenas esfuerzo en distintas 
máquinas, copiar ficheros o ejecutar tareas repetitivas empleado una corta 
serie de comandos. Una grandísima herramienta para administradores de sistema y 
desarrolladores.&lt;/p&gt;
&lt;p&gt;Lo único que necesitamos es instalar &lt;strong&gt;fabric&lt;/strong&gt; y crear un fichero llamado 
&lt;code&gt;fabfile.py&lt;/code&gt; donde especificaremos las tareas que queremos programar. Para 
instalar la última versión estable de fabric, lo mejor es emplear &lt;code&gt;easy_install&lt;/code&gt; 
o &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install fabric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez creado el fichero &lt;code&gt;fabfile.py&lt;/code&gt;, lo único que tendremos que hacer para 
ejecutar una tarea del mismo, sería escribir el comando &lt;code&gt;fab&lt;/code&gt; seguido del nombre 
que le hayamos dado a la tarea (este sería el funcionamiento básico). Y la tarea 
se ejecutaría inmediatamente. &lt;/p&gt;
&lt;p&gt;Para comprender mejor como funciona Fabric, muestro aquí el contenido actual de 
mi fichero &lt;code&gt;fabfile.py&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    fabfile.py: A fabric script for generate my personal blog&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;joe di castro &amp;lt;joe@joedicastro.com&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;__license__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GNU General Public License version 3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;__date__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;28/06/2011&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.2&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rsync_project&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.console&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;confirm&lt;/span&gt;

&lt;span class="n"&gt;PELICAN_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;git://github.com/ametaireau/pelican.git&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PROD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;joedicastro.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PROD_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/joedicastro/webapps/joedicastro&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOCAL_WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/www&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ENV_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PELICAN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CONFIG_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;site/pelican.conf.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;site/output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_valid_HTML&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Remove the obsolete rel=&amp;quot;&amp;quot; and rev=&amp;quot;&amp;quot; links in footnotes.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fil&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fil&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sed -i {0} -r -e &amp;#39;s/re[l|v]=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;footnote&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;//g&amp;#39; {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
                      &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;\ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make a virtual enviroment&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;virtualenv {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_PATH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_del_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Delete a virtual enviroment.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rm -rf {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_PATH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_clone_pelican&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Clone Pelican from repository.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git clone {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICAN_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_install&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Install Pelican in the virtual enviroment.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICAN&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}/bin/python setup.py install&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_PATH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_browse&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Browse the local Apache site.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firefox -new-window http://localhost/joedicastro.com 2&amp;gt;/dev/null &amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoreload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Generate the site from source.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}/bin/pelican {2} -s {1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                              &lt;span class="s"&gt;&amp;quot;-r&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;autoreload&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_clean&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Remove the output folder.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rm -rf {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_local_deploy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Deploy to the local apache web server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rm  -rf {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOCAL_WEB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cp -r {0} {1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOCAL_WEB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_pelican&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Update Pelican to last revision from repository.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICAN&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get Pelican and install it in a virtual enviroment.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warn_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;_del_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_make_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warn_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;_clone_pelican&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;regen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Regenerate the site from source.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;_clean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_gen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_valid_HTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_local_deploy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@hosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my_user@&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;PROD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Publish into remote web server with rsync.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;regen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_browse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;¿Estas seguro de querer publicarlo?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rsync_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROD_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create a new blog article.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gedit --new-window {0}/site/source/blog/{1}.md 2&amp;gt;/dev/null &amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
          &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firefox --new-window {0}/index.html &amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;img4web&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Optimize .jpg &amp;amp; .png images and copy them into source pictures dir.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./img4web.py -d {0} {1} {2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
          &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;site/source/pictures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;--delete&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;-s {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, veremos el funcionamiento básico que nos permite este script. Primero 
vemos las tareas que tenemos disponibles:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab -l
&lt;span class="go"&gt;    fabfile.py: A fabric script for generate my personal blog&lt;/span&gt;

&lt;span class="go"&gt;Available commands:&lt;/span&gt;

&lt;span class="go"&gt;    bootstrap     Get Pelican and install it in a virtual enviroment.&lt;/span&gt;
&lt;span class="go"&gt;    img4web       Optimize .jpg &amp;amp; .png images and copy them into source pict...&lt;/span&gt;
&lt;span class="go"&gt;    new           Create a new blog article.&lt;/span&gt;
&lt;span class="go"&gt;    publish       Publish into remote server with rsync.&lt;/span&gt;
&lt;span class="go"&gt;    pull_pelican  Update Pelican to last revision from repository.&lt;/span&gt;
&lt;span class="go"&gt;    regen         Regenerate the site from source.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos que hacen cada una de ellas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;bootstrap&lt;/em&gt;&lt;/strong&gt; Si observamos el código, veremos que lo hace es, en este orden: 
eliminar cualquier entorno virtual previo, crear un entorno virtual nuevo, 
descargar Pelican desde el repositorio (si no lo hemos hecho anteriormente) e 
instalar Pelican dentro de este entorno virtual. Y todo esto en un solo paso, casi 
todos los comandos que explicaba en &lt;a href="/pelican-introduccion-e-instalacion.html"&gt;Pelican - Introducción e Instalación&lt;/a&gt; con 
solo  teclear &lt;code&gt;fab bootstrap&lt;/code&gt;. Así de fácil. Con este comando podemos tanto crear 
una instalación de Pelican desde cero, como actualizar la instalación de Pelican 
después de actualizar este a la última versión con &lt;strong&gt;&lt;em&gt;pull-pelican&lt;/em&gt;&lt;/strong&gt;. Siguiendo 
con nuestro ejemplo, lo que haría este comando es crear los directorios &lt;em&gt;env&lt;/em&gt; y 
&lt;em&gt;pelican&lt;/em&gt; dentro de &lt;em&gt;myblog.com&lt;/em&gt; con el entorno virtual creado y pelican 
instalado.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab bootstrap
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;img4web&lt;/em&gt;&lt;/strong&gt; Este comando hace uso del script que describía en &lt;a href="/optimizar-imagenes-para-la-web.html"&gt;Optimizar 
imágenes para la web&lt;/a&gt; para hacer precisamente eso, reducir el peso de las 
imágenes que empleo en los artículos. Lo que hago es a medida que voy escribiendo 
el articulo es ir guardando las imágenes en el directorio raíz (en nuestro 
ejemplo, &lt;em&gt;myblog.com/&lt;/em&gt;) y cuando lo termino, simplemente ejecuto el comando 
&lt;code&gt;fab img4web&lt;/code&gt; y este me optimiza las imágenes, me guarda las optimizadas en el 
directorio de imágenes del contenido (&lt;em&gt;myblog.com/site/source/pictures/&lt;/em&gt;) y me 
elimina las imágenes originales del directorio raíz. Cuando termina me muestra un 
resumen con la cantidad de imágenes procesadas y el ahorro en espacio conseguido. 
Espacio en disco ahorrado que se resume en menos ancho de banda consumido y en 
páginas web que se cargan más rápido.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab img4web
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; Con este creo o edito los artículos del blog. Realiza 
tres funciones: me abre una venta de Gedit con el articulo que le indico con la 
extensión &lt;code&gt;.md&lt;/code&gt;, me abre una ventana de Firefox que me muestra el fichero 
&lt;em&gt;index.html&lt;/em&gt; del directorio del sitio generado por Pelican 
(&lt;em&gt;myblog.com/site/output/index.html&lt;/em&gt;) y finalmente me activa Pelican con la 
opción &lt;code&gt;autoreload&lt;/code&gt;. Luego empleando el plugin &lt;strong&gt;Grid&lt;/strong&gt; de Compiz, divido la 
pantalla en dos mitades y coloco a la izquierda Gedit y a la derecha Firefox. 
Esto me permite, como explicaba en &lt;a href="/de-drupal-a-pelican.html"&gt;De Drupal a Pelican&lt;/a&gt; editar el contenido 
y previsualizar el resultado casi en tiempo real, disponiendo al mismo tiempo de 
un buen corrector ortográfico. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab new:&lt;span class="s2"&gt;&amp;quot;Articulo de prueba&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;publish&lt;/em&gt;&lt;/strong&gt; El más importante, el que sube los artículos al servidor web. 
Publicar el contenido de la web es tan sencillo como ejecutar este comando. Lo 
que hace es regenerar el contenido (por si hubiera algún cambio sin guardar) y 
luego mostrarme el resultado en firefox. Pero el resultado que me muestra no es 
el del directorio de salida de Pelican, si no de una copia que tengo en un 
servidor Apache local. Esto me permite ver los cambios de manera más fiel a la 
versión web, puesto que hace uso del fichero .htaccess y de las reglas que tengo 
establecidas en él. Finalmente me pregunta si realmente deseo publicar el 
contenido, por si se me hubiera escapado algo. Si le digo que no, aborta la 
publicación, pero si le digo que si, me sincroniza el contenido de la carpeta 
local con la remota empleando &lt;strong&gt;rsync&lt;/strong&gt;. De esta manera solo se transmiten los 
ficheros nuevos, se borran los que se hayan eliminado en local y &lt;strong&gt;solo transmite 
la parte que haya cambiado de los archivos modificados&lt;/strong&gt;. Gracias a esto, 
modificar o añadir contenido es cuestión de segundos. Y sencillisimo.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab publish
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;pull_pelican&lt;/em&gt;&lt;/strong&gt; Nos sirve para actualizar Pelican a la última revisión 
disponible en el repositorio oficial. Si después de ejecutarlo, queremos instalar 
la nueva versión en nuestro entorno virtual para poder emplearla, simplemente 
tenemos que volver a ejecutar &lt;code&gt;fab bootstrap&lt;/code&gt; y todo se realizará de forma 
automática.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab pull_pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;regen&lt;/em&gt;&lt;/strong&gt; El proceso principal, es el que le pide a Pelican que genere el 
sitio web a partir de nuestro directorio de origen. También realiza varios 
procesos: primero eliminar el directorio de salida actual (para tener una copia 
fresca), genera el nuevo contenido, luego procesa los archivos para que 
validen en HTML5 y finalmente hace una copia del directorio de salida a mi 
servidor local Apache. El procesar los archivos para validar en HTML5 se debe a 
que markdown crea unos enlaces &lt;code&gt;rel="footnote"&lt;/code&gt; y &lt;code&gt;rev="footnote"&lt;/code&gt; en las notas 
al pie que se han quedado obsoletos y no son necesarios. De momento es un 
post-procesado, pero puede que finalmente modifique Pelican para que se haga en 
tiempo de generación del sitio. Aunque creo que  el rendimiento de esta manera 
sería menor que emplear el comando &lt;code&gt;sed&lt;/code&gt; que ejecuta este proceso, será cuestión 
de probarlo. También se podría modificar markdown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con solo &lt;strong&gt;6&lt;/strong&gt; comandos tengo automatizadas todas las tareas básicas para 
administrar y crear contenido en mi blog. Ni siquiera el potente y buenísimo 
&lt;a href="http://drupal.org/project/drush"&gt;drush&lt;/a&gt; de Drupal me permitía este nivel de automatización (aunque se 
acercaba bastante). De esta manera solo me tengo que preocupar de crear 
artículos y de las posibles personalizaciones que le quiera realizar al tema del 
sitio. Me olvido de todo lo demás, de todo lo que conlleva un CMS. Solo hay una 
manera de bloguear más cómoda para los que a estos les parezca algo complejo, 
servicios como Tumblr. Aunque si quieres tener el control sobre tu sitio, no 
conozco manera más cómoda y con más ventajas que esta. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">joe di castro</dc:creator><pubDate>Tue, 28 Jun 2011 23:54:00 -0000</pubDate><category>Pelican</category><category>python</category><category>markdown</category><category>reStructuredText</category><category>blog</category><category>HTML</category><category>rsync</category><category>fabric</category></item><item><title>Pelican - Introducción e Instalación</title><link>http://joedicastro.com/pelican-introduccion-e-instalacion.html</link><description>&lt;p&gt;&lt;a href="http://docs.notmyidea.org/alexis/pelican/"&gt;Pelican&lt;/a&gt; es un generador de sitios web con contenido estático. Está orientado 
originalmente a la creación de blogs. &lt;strong&gt;Pelican&lt;/strong&gt; (Pelicano) es una anagrama de 
la palabra francesa &lt;em&gt;Calepin&lt;/em&gt; que significa en español "cuaderno de notas" 
(blog). Su creador y desarrollador principal es el programador francés 
&lt;a href="http://blog.notmyidea.org/"&gt;Alexis Métaireau&lt;/a&gt;. Y es la aplicación que genera el contenido para este 
blog. Personalmente le veo muchas ventajas frente a una plataforma de blogs 
convencional como Wordpress o Drupal, como ya comentaba en mi &lt;a href="http://joedicastro.com/de-drupal-a-pelican.html"&gt;anterior articulo&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Pelican genera este contenido estático (páginas HTML) a partir de ficheros de 
texto plano formateados en un lenguaje de marcado ligero como &lt;a href="http://es.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; o 
&lt;a href="http://es.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt;. También crea fuentes RSS y Atom de los artículos. Y 
dependiendo del tema empleado se pueden tener un archivo de los artículos 
publicados, clasificación por categorías, nube de etiquetas, un &lt;a href="http://es.wikipedia.org/wiki/Blogroll"&gt;blogroll&lt;/a&gt;, 
enlaces a redes sociales, botón para tweeter, paginación, traducciones, etc. 
Aunque viene un tema completo por defecto y están disponibles &lt;a href="https://github.com/ametaireau/pelican-themes"&gt;algunos más&lt;/a&gt;, 
se puede crear uno completamente personalizado desde cero. La creación de 
estos temas se basa en el sistema de plantillas &lt;a href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;, lo que nos 
permite una gran flexibilidad. También disponemos de varios scripts que nos 
proporcionan soporte para comentarios con &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; y de analíticas con 
&lt;a href="http://www.google.com/intl/es/analytics/"&gt;Google Analytics&lt;/a&gt; ó &lt;a href="http://piwik.org/"&gt;Piwik&lt;/a&gt;. También nos permite generar ficheros PDFs de 
los artículos automáticamente y mostrar los enlaces a ellos, siempre que los 
artículos se hayan creado con reStructuredText.&lt;/p&gt;
&lt;p&gt;Es un software muy joven, el primer commit en &lt;a href="https://github.com/ametaireau/pelican"&gt;GitHub&lt;/a&gt; data del 13 de Agosto de 
2010, pero que ha evolucionado bastante rápido y que aún sigue desarrollándose a 
un  buen ritmo. Es posible que por esto aún tenga alguna carencia o algún que 
otro fallo, pero su autor es muy receptivo y acepta de buena gana las sugerencias, 
informes de errores y colaboraciones de desarrollo. Cuenta con una documentación 
bastante decente y actualizada. Alguno que otra cosa no está documentada, pero 
lo veo normal dado el ritmo de desarrollo y de a quien va orientado un software 
como este. Es muy sencilla su instalación y su utilización cuando se ha leído 
esta, pero será mejor que lo explique con un ejemplo sobre la marcha.&lt;/p&gt;
&lt;h3 id="instalaci+n_para_linux"&gt;Instalación (para Linux)&lt;/h3&gt;
&lt;p&gt;La instalación del mismo es relativamente sencilla si no queremos complicarnos 
la vida, siempre tenemos la última versión disponible en el &lt;a href="http://pypi.python.org/pypi/pelican/2.7.2"&gt;PyPi&lt;/a&gt;. Así que 
instalarlo podría ser tan sencillo como esto:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; easy_install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aunque recomiendo emplear &lt;a href="http://www.pip-installer.org/en/latest/index.html"&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/a&gt; en lugar de &lt;code&gt;easy_install&lt;/code&gt;, de este modo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De todos modos desaconsejo emplear este método, me parece mejor solución, dada 
la velocidad de desarrollo del software, emplear un entorno virtual para su 
instalación. Un &lt;a href="http://www.virtualenv.org/en/latest/index.html"&gt;entorno virtual&lt;/a&gt; nos permite tener una versión de Python 
independiente de la del resto del sistema, con sus propias librerías y con el 
software instalado que nosotros deseemos. Todo esto solo estará disponible cuando 
nos encontremos dentro de este entorno virtual, sin afectar al resto del 
sistema. Y podemos eliminarlo o des/activarlo cuando deseemos. Es bastante más 
sencillo de utilizar de lo que parece y es realmente potente. &lt;/p&gt;
&lt;p&gt;Veamos, paso a paso, la forma en que yo lo instalaría.&lt;/p&gt;
&lt;p&gt;Creamos una carpeta que contendrá Pelican, el entorno virtual y el sitio que 
crearemos. Yo le daría el nombre de la URL del blog, por ejemplo, &lt;em&gt;myblog.com&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mdkir myblog.com
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;myblog.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descargamos la revisión actual del repositorio de Pelican en GitHub. Esto nos 
creara una carpeta llamada &lt;em&gt;pelican&lt;/em&gt; que contendrá una copia del repositorio en 
local (lo cual nos será muy útil en el futuro para actualizarlo). &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone git://github.com/ametaireau/pelican.git
&lt;span class="go"&gt;Cloning into pelican...&lt;/span&gt;
&lt;span class="go"&gt;remote: Counting objects: 2603, done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Compressing objects: 100% (1143/1143), done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Total 2603 (delta 1541), reused 2420 (delta 1374)&lt;/span&gt;
&lt;span class="go"&gt;Receiving objects: 100% (2603/2603), 687.30 KiB | 397 KiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Resolving deltas: 100% (1541/1541), done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear nuestro entorno virtual. En caso de no tener instalado &lt;code&gt;pip&lt;/code&gt; 
o &lt;code&gt;virtualenv&lt;/code&gt;, es rematadamente sencillo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; easy_install pip
&lt;span class="gp"&gt;$&lt;/span&gt; pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voy a llamar &lt;em&gt;env&lt;/em&gt; a nuestro entorno virtual. Lo creamos así.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; virtualenv env
&lt;span class="go"&gt;New python executable in env/bin/python&lt;/span&gt;
&lt;span class="go"&gt;Installing distribute...........................................................&lt;/span&gt;
&lt;span class="go"&gt;................................................................................&lt;/span&gt;
&lt;span class="go"&gt;.......................................done.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; ls
&lt;span class="go"&gt;env  pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora activaremos nuestro entorno virtual para "sumergirnos" dentro de él. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
&lt;span class="go"&gt;(env)$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que aparece el nombre del entorno virtual entre paréntesis antes de la 
línea del &lt;a href="http://es.wikipedia.org/wiki/Prompt"&gt;prompt&lt;/a&gt;. Eso quiere decir que 
nos encontramos dentro de este entorno virtual. Ahora procederemos a instalar 
Pelican. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;pelican/
&lt;span class="gp"&gt;$&lt;/span&gt; python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos ya instalado Pelican, &lt;strong&gt;solo dentro de nuestro entorno virtual&lt;/strong&gt;. 
Si probamos a llamar al programa fuera de él, veremos que no está disponible, 
luego necesitaremos activar este entorno cada vez que queramos emplearlo.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican
&lt;span class="go"&gt;CRITICAL: you need to specify a path containing the content (see pelican --help for &lt;/span&gt;
&lt;span class="go"&gt;more information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos da un error porque no le hemos pasado los parámetros necesarios. Ahora 
desactivamos el entorno y volvemos a llamar al programa y nos dice que no 
existe.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; deactivate
&lt;span class="gp"&gt;$&lt;/span&gt; pelican
&lt;span class="go"&gt;pelican: orden no encontrada&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tenemos ahora dentro de &lt;em&gt;myblog.com/&lt;/em&gt; dos directorios, &lt;em&gt;env&lt;/em&gt; y &lt;em&gt;pelican&lt;/em&gt;. 
Podríamos borrar ahora el directorio &lt;em&gt;pelican&lt;/em&gt; porque ya lo tenemos instalado 
dentro del entorno virtual, pero sería bueno conservarlo para poder actualizarlo 
en el futuro mediante &lt;code&gt;git pull&lt;/code&gt;. Yo crearía una tercer directorio, &lt;em&gt;site&lt;/em&gt; donde 
se alojaría nuestro sitio, organizado a su vez en tres subdirectorios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;: sería la carpeta donde alojaríamos los archivos de texto de 
nuestro blog y todo aquello que quisiéramos que formara parte de nuestro sitio: 
imágenes, fichero &lt;a href="http://es.wikipedia.org/wiki/Htaccess"&gt;.htacess&lt;/a&gt;, fichero &lt;a href="http://es.wikipedia.org/wiki/Robots.txt"&gt;robots.txt&lt;/a&gt;, páginas 
personalizadas...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;: El resultado del procesamiento de Pelican, es decir, nuestro blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;theme&lt;/strong&gt; : Sería el tema que usariamos para crear nuestro blog, en el 
 estarían las plantillas &lt;strong&gt;jinja2&lt;/strong&gt;, las hojas de estilo .css, el contenido 
 estático (iconos, imágenes), ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luego, lo haríamos así:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir -p site/source
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir site/output
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir site/theme
&lt;span class="gp"&gt;$&lt;/span&gt; ls site/
&lt;span class="go"&gt;output  source  theme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya está, tenemos instalado Pelican y creada nuestra estructura para empezar a 
trabajar con él. Para eso nada mejor que crear un primer sitio de ejemplo. 
Entramos en el entorno virtual y creamos el sitio que viene de ejemplo con 
Pelican:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
&lt;span class="gp"&gt;$&lt;/span&gt; pelican pelican/samples/content/ -o site/output -s pelican/samples/pelican.conf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora si abrimos el fichero &lt;code&gt;myblog.com/site/output/index.html&lt;/code&gt; en un 
navegador, veremos algo como esto (en la imagen se ve la categoría cat1 
seleccionada):&lt;/p&gt;
&lt;p style="text-align:center;"&gt;&lt;img src="pictures/sample_blog.png" 
alt="pelican sample blog" title="pelican sample blog" width=453 height=700 /&gt;&lt;/p&gt;

&lt;p&gt;Es así de fácil de emplear Pelican, simplemente especificarle el directorio donde 
está el origen del contenido, el directorio destino y el fichero de configuración. 
Aunque con el fichero de configuración correctamente creado, solo será necesario 
indicarle la ubicación del mismo. Para comprender mejor la estructura y como 
funciona Pelican, sería buena idea copiar el tema, el fichero de configuración y 
el contenido que han generado este sitio de ejemplo a la carpeta &lt;em&gt;site&lt;/em&gt; para no 
empezar nuestro blog desde cero.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp -r pelican/samples/content/* site/source
&lt;span class="gp"&gt;$&lt;/span&gt; cp -r pelican/pelican/themes/notmyidea/* site/theme/
&lt;span class="gp"&gt;$&lt;/span&gt; cp pelican/samples/pelican.conf.py site/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En próximos artículos veremos como crear artículos, publicar el sitio, 
personalizar el tema y automatizar todos estos procesos para hacerlo todo mucho 
más sencillo. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">joe di castro</dc:creator><pubDate>Mon, 27 Jun 2011 10:21:00 -0000</pubDate><category>Pelican</category><category>python</category><category>markdown</category><category>reStructuredText</category><category>blog</category><category>HTML</category><category>Piwik</category><category>Disqus</category></item><item><title>De Drupal a Pelican</title><link>http://joedicastro.com/de-drupal-a-pelican.html</link><description>&lt;p&gt;Este blog no está realizado con ningún &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;, ni siquiera utiliza &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt; alguna, es 
simplemente HTML + CSS y nada más. Es decir, es contenido estático, no dinámico.
Hasta hace 3 días estaba funcionando con el mejor &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; &lt;a href="http://es.wikipedia.org/wiki/PHP"&gt;PHP&lt;/a&gt; que conozco, 
&lt;a href="http://drupal.org"&gt;Drupal&lt;/a&gt;. Pero persiguiendo el camino hacia el minimalismo y la productividad 
(fiel al espíritu &lt;a href="http://es.wikipedia.org/wiki/Principio_KISS"&gt;&lt;abbr title="Keep It Simple, Stupid (en español, &amp;quot;Mantenlo simple, estúpido&amp;quot;). Ver enlace"&gt;&lt;abbr title="Keep It Simple, Stupid (en español, &amp;quot;Mantenlo simple, estúpido&amp;quot;). Ver enlace"&gt;KISS&lt;/abbr&gt;&lt;/abbr&gt;&lt;/a&gt;) que ya inicie cuando &lt;a href="http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html"&gt;comencé a escribir todos mis 
artículos en Drupal con Markdown&lt;/a&gt;, el siguiente paso era evidente. La pregunta
era muy sencilla, si un blog consta de contenidos que rara vez cambian 
(exceptuando los comentarios) ¿para que necesito un gestor de contenidos 
dinámicos?&lt;/p&gt;
&lt;p&gt;La respuesta es fácil, para nada. Actualmente, gracias a servicios como los de 
&lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt;, &lt;a href="http://livefyre.com/"&gt;Livefyre&lt;/a&gt;, &lt;a href="http://intensedebate.com/"&gt;IntenseDebate&lt;/a&gt; ó &lt;a href="http://www.aboutecho.com/commenting"&gt;Echo&lt;/a&gt; es posible 
externalizar el único contenido dinámico básico de un blog, los comentarios. 
Todo lo demás puede ser contenido puramente estático, solo HTML y CSS, sin 
renunciar a prácticamente nada de lo que nos ofrece un blog basado en un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; 
como Wordpress o Drupal. Se pueden emplear scripts externos en javascript si se 
desea, o insertarlos dentro del HTML. Lo que nos permite implementar lo mismo 
que en un blog normal. Además se puede disponer también de feeds RSS y Atom.&lt;br /&gt;
&lt;/p&gt;
&lt;h2 id="elegir_un_generador_de_contenido_est+tico"&gt;Elegir un generador de contenido estático&lt;/h2&gt;
&lt;p&gt;Evidentemente la idea no es crear las paginas HTML a mano, ni de broma, lo lógico 
era seguir empleando la misma estrategia que ya había iniciado con Drupal, 
emplear solo ficheros de texto en formato Markdown que nos generarán el HTML 
necesario de forma automática. Entonces lo que tenía que encontrar era un 
software que me permitiera hacer lo mismo que Drupal, pero sin toda la 
parafernalia que rodea a un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;. Un generador de sitios web estáticos (a partir 
de markdown) y que a ser posible estuviera escrito en &lt;strong&gt;Python&lt;/strong&gt;, mi lenguaje 
favorito. Como ya adelante en el &lt;a href="http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html"&gt;artículo sobre Markdown&lt;/a&gt;, existen varias opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.notmyidea.org/alexis/pelican/"&gt;Pelican&lt;/a&gt; de Alexis Métaireau, que emplea en su propio &lt;a href="http://blog.notmyidea.org/"&gt;blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogofile.com/"&gt;Blogofile&lt;/a&gt; de Ryan McGuire que también lo usa en su &lt;a href="http://www.enigmacurry.com/"&gt;blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hyde.github.com/"&gt;Hyde&lt;/a&gt; de Lakshmi Vyas. Su &lt;a href="http://ringce.com/blog/"&gt;blog&lt;/a&gt; con Hyde también.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; de Armin Ronacher. Solo permite reStructuredText, con él crea su 
&lt;a href="http://lucumr.pocoo.org/"&gt;blog&lt;/a&gt;, un ejemplo de elegancia y calidad.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bueno, tenía varias posibilidades, solo tenía que elegir una que se adaptara 
mejor a mis necesidades. De entrada descarté &lt;strong&gt;rstblog&lt;/strong&gt; porque no permitía el 
empleo de markdown, cuando los otros permitían tanto .rst como .md como formatos 
de entrada. Solo me quedaban 3 candidatos. Así que lo primero que hice antes de 
nada, fue buscar blogs creados con cada uno de ellos, para ver que posibilidades 
reales ofrecían. Encontré ejemplos de blogs de mucha calidad de todos ellos. 
Aunque enseguida me di cuenta de una cosa, en dos de ellos los mejores blogs lo 
eran porque tenían una elevada personalización detrás (artículos de sus autores 
contándolo). Y curiosamente con el tercero, casi todos preferían quedarse con la 
configuración estándar, sin tocar prácticamente nada, y la verdad es que el 
resultado era bastante decente. Luego miré que cargaba cada uno de ellos en la 
página de entrada, y volvía a repetirse la misma tendencia. En los dos primeros 
vi demasiadas hojas de estilo, imágenes y demasiados scripts javascript, en el 
tercero, nuevamente se cargaban menos elementos. Finalmente comparé 
características, modo de funcionamiento y le eché un vistazo rápido al código. 
La impresión era otra vez la misma, dos de ellos, &lt;strong&gt;Hyde&lt;/strong&gt; y &lt;strong&gt;Blogofile&lt;/strong&gt; aunque 
aparentemente potentes, los veía innecesariamente complejos, en cambió 
&lt;strong&gt;Pelican&lt;/strong&gt; era bastante más sencillo. Otra forma de determinar su repercusión 
era contar el número de descargas de cada una de las aplicaciones desde PyPi. 
Los números son los siguientes (a 27 de Junio de 2011), obtenidos con 
&lt;a href="https://github.com/aclark4life/vanity"&gt;Vanity&lt;/a&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Paquete&lt;/th&gt;
&lt;th&gt;Descargas&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Blogofile&lt;/td&gt;
&lt;td&gt;2.419&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hyde&lt;/td&gt;
&lt;td&gt;1.945&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pelican&lt;/td&gt;
&lt;td&gt;3.919&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;La elección final era Pelican y no me arrepiento en absoluto, la prueba es que 
esté blog está funcionando gracias a él (Gracias Alexis!). Aunque las otras dos 
son también muy buenas opciones, y seguramente serían la primera opción para más 
de uno. Y siempre podría cambiar fácilmente, porque el contenido seguiría estando 
guardado en ficheros de texto con marcado markdown. &lt;/p&gt;
&lt;p&gt;No entraré en detalles ahora de como instalar y emplear &lt;strong&gt;Pelican&lt;/strong&gt;, eso lo dejo 
para otro próximo articulo, &lt;a href="/pelican-introduccion-e-instalacion.html"&gt;Pelican&lt;/a&gt;. Pero si voy a hacer un repaso de los 
pros y los contras de emplear Pelican frente a un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; como Drupal para crear un 
blog.&lt;/p&gt;
&lt;h2 id="ventajas_de_pelican_vs_cms"&gt;Ventajas de Pelican vs &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;&lt;/h2&gt;
&lt;h4 id="solo_ficheros_de_texto_no_bdd"&gt;Solo ficheros de texto, No &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt;&lt;/h4&gt;
&lt;p&gt;Simplemente te tienes que preocupar de eso, ficheros de texto, es donde guardas 
el contenido que creas. Todo lo demás lo genera Pelican por ti. Nada de crear y 
gestiónar bases de datos, ni copias de seguridad de la misma y un montón de 
espacio y recursos desaprovechado solamente para generar dinámicamente el mismo 
contenido que te genera Pelican.&lt;/p&gt;
&lt;h4 id="mejor_rendimiento_carga_de_p+gina_m+s_r+pida"&gt;Mejor rendimiento, carga de página más rápida&lt;/h4&gt;
&lt;p&gt;Generar contenido dinámico es más caro en recursos y es más lento (consultas a 
la &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt;). Sobre todo a medida que llenas tu &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; de personalizaciones y plugins. 
¿Que hacen prácticamente todos los sistemas de caché?, generar contenido 
estático para luego servirlo más rápidamente. ¿No es un poco estúpido crear 
contenido que apenas cambia en el tiempo, en un sistema dinámico que genera ese 
contenido cada vez y que para mejorar su rendimiento lo convierte en estático? 
Y ya no hablemos de las múltiples hojas CSS, scripts javascript y enlaces a 
contenido externo que cargan la mayoría de los &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; por defecto. Cada plugin que 
añadimos pone su granito de arena y optimizar todo esto requiere dedicación y 
esfuerzo (o seguir sumando aún más plugins en el mejor de los casos). Con 
Pelican ya tienes directamente el contenido estático y menos recursos que 
descargar. En este blog, sin contar con los ficheros javascript de Disqus y 
Piwik, lo único que se descarga es un fichero HTML, una hoja CSS y las imágenes 
que se incluyen en los artículos (cuando las hay). Es decir sirves el mismo 
contenido pero generando menos tráfico desde tu servidor. &lt;/p&gt;
&lt;h4 id="soporta_mejor_el_tr+fico"&gt;Soporta mejor el tráfico&lt;/h4&gt;
&lt;p&gt;Cuando un sitio web soporta mucho tráfico, emplear un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; requiere de mucha 
optimización y generalmente de mucha maquina o complejas instalaciones. Y la 
base principal siempre es un sistema de caché que sirva contenido lo más 
estático posible. Se cachea todo lo que se puede, y si es en memoria mejor. Las 
&lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt; son un problema aparte, desde soluciones NoSQL a clusters o &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt; distribuidas. 
Con contenido estático no te tienes que preocupar de optimizar los accesos a la 
&lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt;, solo de tener un buen servidor web y si quieres, cachear en memoria o 
ampliar máquina. Pero poco más.&lt;/p&gt;
&lt;h4 id="seguridad"&gt;Seguridad&lt;/h4&gt;
&lt;p&gt;Olvídate de problemas de seguridad, los únicos agujeros de seguridad de un sitio 
con contenido estático están del lado del servidor web, de todo lo demás, te 
olvidas. Establece bien los permisos en el sistema de ficheros y punto. El único 
contenido dinámico del sitio (javascript) ni siquiera es algo que deba 
preocuparte, es algo externo que le concierne a &lt;strong&gt;Disqus&lt;/strong&gt; o al sistema de 
analíticas web que elijas (Google Analytics o Piwik).&lt;/p&gt;
&lt;h4 id="olvidarse_de_gestionar_un_cms_mantenimiento_mucho_m+s_sencillo_nulo"&gt;Olvidarse de gestionar un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;. Mantenimiento mucho más sencillo (nulo)&lt;/h4&gt;
&lt;p&gt;Instalar el &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;, crear la &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt;, encontrar, instalar y probar los plugins que 
necesitas, actualizaciones, actualizaciones de seguridad, personalizaciones, 
temas... Todo lo que rodea a cualquier &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;. Y ya no digamos si hablamos de un 
&lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; potente y complejo como Drupal, con cientos de posibilidades. Y sin olvidar 
toda la basura que se va acumulando en las &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt; tras varias actualizaciones y 
múltiples pruebas de plugins, con Pelican siempre tienes un sistema limpio. 
Todo eso lo olvidas con Pelican, lo instalas, personalizas y automatizas una 
sola vez, luego te olvidas de todo lo que no sea escribir (si quieres, nada te 
impide seguir cambiándolo y mejorándolo). Emplea tú tiempo en crear contenido.&lt;/p&gt;
&lt;h4 id="backups_m+s_sencillos"&gt;Backups más sencillos&lt;/h4&gt;
&lt;p&gt;Con un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; &lt;abbr title="No hacerlas es una decisión nefasta"&gt;deberías hacer Backups&lt;/abbr&gt; del servidor web tanto del sistema de ficheros 
como de la &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt;. Y sería aconsejable tener un servidor web local montado para 
probar los cambios que vayas a hacer en el &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; sin miedo a romper nada. Con 
Pelican ni siquiera necesitas hacer Backups del servidor ni del contenido web. 
Todo lo que necesitas para generarlo ya está en tu ordenador en esos ficheros de 
texto. Incluso si empleas un tema propio, también está en tu equipo. Así que las 
copias de seguridad de tu sitio web no son distintas a las que 
&lt;abbr title="No me digas que aún no las haces, ¿estas de broma?"&gt;regularmente ya haces&lt;/abbr&gt; de tu ordenador personal.&lt;/p&gt;
&lt;h4 id="hosting_en_cualquier_sitio"&gt;Hosting en cualquier sitio&lt;/h4&gt;
&lt;p&gt;Solo tienes que alojar contenido estático, no necesitas &lt;abbr title="Base de datos"&gt;BDD&lt;/abbr&gt; ni soporte para 
ningún lenguaje o librería en particular. Puedes hasta utilizar recursos 
gratuitos como las páginas de &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; o &lt;a href="http://bitbucket.org/"&gt;BitBucket&lt;/a&gt; o un sistema 
de ficheros en la nube económico como &lt;a href="http://aws.amazon.com/es/s3/"&gt;Amazon S3&lt;/a&gt; (o 
&lt;a href="http://aws.amazon.com/es/cloudfront/"&gt;Amazon CloudFront&lt;/a&gt;). Solo necesitas eso, servir ficheros, nada más. Hasta 
el hosting más económico te sirve. &lt;/p&gt;
&lt;h4 id="emplear_un_cvs_para_gestionarlo"&gt;Emplear un &lt;abbr title="Control Version System (en español, &amp;quot;Sistema de Control de Versiones&amp;quot;)"&gt;CVS&lt;/abbr&gt; para gestionarlo&lt;/h4&gt;
&lt;p&gt;Poder emplear Git o Mercurial o cualquier otro &lt;abbr title="Control Version System (en español, &amp;quot;Sistema de Control de Versiones&amp;quot;)"&gt;CVS&lt;/abbr&gt; para gestionar los cambios 
del blog no tiene precio. Ningún sistema de revisiones de &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; es tan potente. 
Además tienes la posibilidad de crear un &lt;em&gt;hook&lt;/em&gt; para que al enviar un commit 
después de crear un articulo (o realizar un cambio) se suba el contenido 
automáticamente al servidor. Con esto realizar cualquier cambio o revertir un 
error es algo trivial. Además te permite subir una copia a un sitio como GitHub 
o BitBucket y tenerlo siempre disponible en cualquier sitio con conexión a la 
red. Como maravillosa opción, esto permite que el contenido de un blog, incluso 
de un mismo articulo, sea editado por más de una persona de manera bastante más 
sencilla, potente y menos propensa a errores que con un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;. &lt;/p&gt;
&lt;h4 id="crear_los_articulos_off-line"&gt;Crear los articulos off-line&lt;/h4&gt;
&lt;p&gt;Eso te permite ir creando los artículos al ritmo que te de la gana, cuando 
quieras y en cualquier sitio con un portátil. No necesitas estar conectado a la 
red. Esto también puede hacerse con un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;, pero suele ser más complejo 
(exceptuando emplear cortar y pegar) e inseguro (si se habilita el envío remoto 
de artículos). Yo lo había logrado en Drupal empleando markdown, pero seguía 
necesitando un segundo paso on-line para personalizar las etiquetas. &lt;/p&gt;
&lt;h4 id="edici+n_de_art+culos_m+s_c+moda"&gt;Edición de artículos más cómoda&lt;/h4&gt;
&lt;p&gt;Puede parecer que un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; con su editor WYSIWYG es más cómodo, pero todo lo 
contrario. Ya lo comentaba en el &lt;a href="http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html"&gt;artículo sobre markdown&lt;/a&gt;. Pero es que 
además me proporciona una mejor experiencia de edición y más potente. Explico 
como redacto yo los artículos para que se entienda mejor. Divido la pantalla en 
dos mitades, a la izquierda el editor de textos y a la derecha el navegador. 
Como editor de textos empleo Gedit, que tiene resaltado de texto para markdown y 
un corrector ortográfico (por esto no uso vim para esto) bastante mejor que el 
de Firefox (que solo examina el texto hasta cierto número de casos dudosos). 
Además Pelican tiene una maravillosa opción, &lt;code&gt;autoreload&lt;/code&gt; que lo hace correr en 
segundo plano y cuando detecta un cambio en uno de los ficheros, vuelve a generar 
el contenido. Entonces en gedit le digo que autoguarde el contenido cada 3 
minutos (o a voluntad, manualmente) y cuando Pelican lo detecta, automáticamente 
regenera los ficheros HTML. Como navegador empleo Firefox y tengo, abierto en 
una pestaña, el fichero &lt;code&gt;index.html&lt;/code&gt; que genera Pelican y empleando la extensión 
&lt;a href="https://addons.mozilla.org/es-ES/firefox/addon/auto-reload/?src=api"&gt;Auto Reload&lt;/a&gt; el contenido de la página (en local) se actualiza 
automáticamente al detectar un cambio en el fichero. Es decir, como en la 
primera página se puede ver el contenido completo del último articulo, lo que 
estoy viendo es una previsualización automática del contenido en la página cada 
3 minutos. Y todo esto en off-line, sin estar conectado a internet. Esto si es 
un verdadero editor WYSIWYG, y no los otros. Además, que demonios, los 
navegadores no se diseñaron para crear texto, cualquier editor de texto es más 
potente.&lt;/p&gt;
&lt;h4 id="control_del_spam"&gt;Control del Spam&lt;/h4&gt;
&lt;p&gt;El Spam, esa lacra que azota toda la web. En Pelican, ese problema, lo tiene que 
gestionar Disqus, no tú. Tú solo tienes que gestionar el poco que se le escape. 
Pero el buscar un plugin, configurarlo y que funcione bien, es algo de lo que no 
tienes que preocuparte. En Drupal tenía este asunto solucionado, pero fue cosa 
de probar varios plugins, hasta que al final &lt;a href="http://joedicastro.com/combatir-el-spam-en-drupal.html"&gt;di con uno que me lo solucionaba de
verdad&lt;/a&gt;. &lt;/p&gt;
&lt;h4 id="recursos_de_cpu_y_ram"&gt;Recursos de CPU y RAM&lt;/h4&gt;
&lt;p&gt;El contenido dinámico consume mucha más memoria RAM y CPU en el servidor que 
servir contenido estático. Al fin y al cabo, en el caso del contenido estático, 
es poco más complejo que servir ficheros. Si tienes que compartir el servidor 
con más proyectos, agradecerás no tener que emplear un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; para servir el blog.&lt;/p&gt;
&lt;h4 id="resaltado_de_sintaxis_incorporada_con_pygments"&gt;Resaltado de Sintaxis incorporada con Pygments&lt;/h4&gt;
&lt;p&gt;Mientras en la mayoría de &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; necesitas un plugin para habilitar el resaltado de 
sintaxis para código fuente, en Pelican esto viene por defecto empleando el 
excelente &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="cumplimiento_de_est+ndares_web"&gt;Cumplimiento de Estándares Web&lt;/h4&gt;
&lt;p&gt;Con Pelican es relativamente sencillo configurar el tema para que cumpla los 
estándares web y genere contenido valido. Y una vez que lo haces, es para 
siempre, a no ser que modifiques algo en el tema, todo el contenido que generes 
cumplirá con los estándares (a no ser que incluyas HTML dentro que no lo sea). 
De este modo, este sitio valida HTML5, CSS3 y genera feeds RSS y Atom validos. 
Conseguir esto con un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; y empleando editores WYSIWYG es bastante más complejo
y doloroso. Aunque yo lo había conseguido con Drupal y markdown, tuve que 
modificar un tema casi por completo, casi como crearlo desde cero. &lt;/p&gt;
&lt;h2 id="inconvenientes_de_pelican_vs_cms"&gt;Inconvenientes de Pelican vs &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt;&lt;/h2&gt;
&lt;h4 id="comentarios_sin_resaltado_de_sintaxis"&gt;Comentarios sin resaltado de sintaxis&lt;/h4&gt;
&lt;p&gt;Algo que me permitía Drupal y no me permite Disqus (por ahora) era emplear 
markdown en los comentarios y resaltado de sintaxis para el código fuente. Es el 
mayor inconveniente que he encontrado hasta ahora. Pero bueno, tampoco es algo 
imprescindible y esperemos que Disqus lo soporte en un futuro.&lt;/p&gt;
&lt;h4 id="sitemap"&gt;Sitemap&lt;/h4&gt;
&lt;p&gt;Tampoco Pelican genera sitemaps en xml para los buscadores. Aunque tampoco es 
algo imprescindible y Drupal tampoco lo soporta por defecto, si no a través de 
un módulo. El autor lo tiene como tarea pendiente, y si tarda mucho, a lo mejor 
me animo y lo creo yo mismo.&lt;/p&gt;
&lt;h4 id="personalizaci+n_m+s_sencilla_para_non_geeks"&gt;Personalización más sencilla para non geeks&lt;/h4&gt;
&lt;p&gt;Esta es la parte que menos me afecta, pero es el gran inconveniente para la gran 
mayoría sin conocimientos avanzados. Aunque Pelican no es difícil de instalar y 
configurar, si queremos personalizarlo bastante, la cosa cambia. Los &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; son 
mucho más sencillos en ese sentido, pero el coste a pagar por otro lado no me 
compensa. &lt;/p&gt;
&lt;h4 id="no_tiene_b+squeda_incorporada"&gt;No tiene búsqueda incorporada&lt;/h4&gt;
&lt;p&gt;Es otro pequeño inconveniente que puede suplirse empleando la de Google AdSense 
en el sitio, por ejemplo. Personalmente no me importa demasiado, teniendo 
disponibles en el sitio recursos como el archivo de todos los artículos 
publicados o la nube de etiquetas.&lt;/p&gt;
&lt;h4 id="no_puedes_personalizar_el_contenido_din+micamente"&gt;No puedes personalizar el contenido dinámicamente&lt;/h4&gt;
&lt;p&gt;Con un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; puedes hacer cosas como mostrar un contenido o un tema distinto según 
el perfil del usuario, o según la carga del servidor, etc. Con contenido 
estático lógicamente no puedes hacer esto. A mi me da igual, no lo necesito, es 
solo un blog.&lt;/p&gt;
&lt;br /&gt;

&lt;p&gt;Llevo varios años empleando Drupal en varios sitios y me sigue pareciendo un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; 
excelente y una buenísima opción para generar contenido dinámico para no 
desarrollladores (de otro modo prefiero un framework como Django). Pero 
actualmente, para crear blogs, si se tienen conocimientos suficientes, emplear 
un &lt;abbr title="Content Management System (en español, &amp;quot;Sistema de gestión de contenidos&amp;quot;)"&gt;CMS&lt;/abbr&gt; me parece una decisión poco acertada, es matar moscas a cañonazos. Hoy en 
día hay soluciones como Pelican y las mencionadas arriba (y otras alternativas 
en otros lenguajes) que te permiten crear blogs con facilidad, centrándote 
únicamente en crear los artículos y automatizar todo lo demás. ¿Acaso esa no es 
la razón principal del grandisimo éxito de &lt;a href="http://twitter.com/"&gt;twitter&lt;/a&gt; o &lt;a href="http://www.tumblr.com/"&gt;tumblr&lt;/a&gt;? 
La inmediatez de los resultados y la delegación de la gestión a terceros, tú 
solo escribes. Pelican te permite lo mismo, solo requiere la personalización 
inicial y listo, con la ventaja añadida de que puedes personalizarlo a tu gusto 
y hasta donde te dé la gana o seas capaz.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">joe di castro</dc:creator><pubDate>Wed, 22 Jun 2011 02:10:00 -0000</pubDate><category>markdown</category><category>reStructuredText</category><category>Pelican</category><category>Drupal</category><category>cms</category><category>python</category><category>blog</category><category>HTML</category></item><item><title>Markdown, la mejor opción para crear contenidos web</title><link>http://joedicastro.com/markdown-la-mejor-opcion-para-crear-contenidos-web.html</link><description>&lt;p&gt;Normalmente cuando se crea contenido en un blog o CMS, como Wordpress, Blogger, 
Drupal, Joomla, Plone, Typo, etc, se hace a través de un editor visual (&lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;). 
Algunos editores de este tipo son &lt;a href="http://tinymce.moxiecode.com/"&gt;TinyMCE&lt;/a&gt;, &lt;a href="http://ckeditor.com/"&gt;CKeditor&lt;/a&gt;, &lt;a href="http://nicedit.com/"&gt;NicEdit&lt;/a&gt;, 
&lt;a href="http://www.wymeditor.org/"&gt;WYMEditor&lt;/a&gt;, &lt;a href="http://markitup.jaysalvat.com/home/"&gt;markItUP!&lt;/a&gt;, &lt;a href="http://www.openwebware.com/"&gt;openWYSIWYG&lt;/a&gt;, etc. &lt;/p&gt;
&lt;p&gt;Yo mismo he empleado varios de ellos durante años, en varias plataformas como 
Blogger, Wordpress, Joomla, Drupal, etc. Y si, hay que reconocerlo, te hacen la 
vida muy fácil, sobre todo para aquellos que no quieran preocuparse más que de 
añadir contenido en su página. E incluso usuarios más avanzados como 
administradores o diseñadores web, lo suelen emplear por comodidad frente a un 
área de texto plano. Y si, es cómodo, muy cómodo, a corto plazo. A largo plazo... 
a largo plazo es cuando empiezas a verle los peros y los problemas, que los 
tienen, y bastantes. Veamos cuales son esos problemas y la alternativa, que para 
mi personalmente, es la solución. &lt;/p&gt;
&lt;h3 id="los_problemas_de_los_editores_wysiwyg"&gt;Los problemas de los editores &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;&lt;/h3&gt;
&lt;p&gt;Los editores visuales están pensados para que de una forma muy fácil, se pueda 
editar el contenido de forma visualmente atractiva, sin tenerse que andar 
preocupando del HTML que se genera a partir de él, esto es, no es necesario 
conocer nada de HTML para usar un editor &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;. Puedes añadir negritas, 
cursivas, alinear el texto, cambiar el tamaño, el color, crear tablas, etc, sin 
conocimiento alguno de HTML o CSS. Se supone que el editor genera HTML valido 
correctamente por ti. Y aquí es donde empiezan los problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Los editores visuales generalmente crean el formato con &lt;strong&gt;CSS embebido dentro 
 del HTMl&lt;/strong&gt;, es decir mezclando el contenido y el estilo de la página. Algunos 
 incluso te permiten incluir tus propias hojas de estilo para que el contenido 
 se ajuste al estilo actual de tu web. &lt;/p&gt;
&lt;p&gt;¿Pero que ocurre cuando al cabo de un tiempo, con decenas o más de artículos 
generados quieres cambiar el estilo de tú página? Pues dependiendo de como 
haya realizado el trabajo tu editor &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;, te puedes encontrar con el 
desagradable problema de que todo queda desencajado o no se ajusta al estilo 
actual. Yo me he tenido que enfrentar con este problema en el pasado al 
actualizar una versión de Drupal y cambiar completamente el tema, y no fue 
nada cómodo de solucionar, o al importar contenido de un CMS a otro. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Los editores visuales &lt;strong&gt;se crearon inicialmente para impresión en papel&lt;/strong&gt;, no 
 para HTML. Y HTML se emplea en multitud de dispositivos (desde móviles hasta 
 ereaders) y bien empleado proporciona una flexibilidad que se rompe al mezclar 
 la estructura del documento (HTML) con el estilo del mismo (CSS) en el mismo 
 archivo. Así que a la hora de crear versiones para dispositivos móviles, con 
 todas esas etiquetas CSS embebidas, puede ser un verdadero quebradero de cabeza. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se supone que &lt;strong&gt;tienen que generar HTML válido&lt;/strong&gt;, pero durante mucho tiempo 
   &lt;strong&gt;esto no ha sido siempre así&lt;/strong&gt;, sobre todo si el editor no está bien 
   configurado o tiene algún plug-in que no respeta este tema. Además, generan 
   HTML valido ahora, ¿que pasa en el futuro? Es decir, si quieres pasar 
   contenido antiguo para por ejemplo pasar de HTML 2.0 a HTML 4.0 o incluso 5 
   y eliminar etiquetas obsoletas y generar HTML que cumpla con el estándar, 
   prepárate, porque te espera una ardua tarea. Por no decir que muchos de estos 
   editores tienen errores en su propio código javascript, lo que lleva a 
   frecuentes actualizaciones de los mismos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pueden &lt;strong&gt;generar cantidades absurdas de HTML&lt;/strong&gt;, sobre todo si no están 
 correctamente configurados. Algunos editores (a veces con la configuración por 
 defecto hacen esto, y tienes que ser tú quien lo ajuste para que no ocurra) 
 crean toneladas de &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; sin sentido y totalmente superfluos. 
 Cuando no emplean tablas para formatear algunas presentaciones complejas. Y ni 
 que decir tiene de aquellos editores visuales que te dejan pegar contenido 
 desde un procesador de textos como Word, el HTML generado en estos casos, 
 bueno, hay que verlo para creerlo, un absoluto despropósito. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Es incluso factible que un usuario inexperto pueda &lt;strong&gt;romper el diseño de una 
 página a través de un editor &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;&lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;&lt;/abbr&gt;&lt;/strong&gt;, creando párrafos o &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; de forma 
 inadecuada. Incluso al reescribir un texto es posible que se mezclen  estilos 
 CSS embebidos antiguos con nuevos, generando unos embrollos inmensos a nivel de 
 HTML. Y ya no digo nada de los que rompen el estilo visual de un tema abusando 
 de colores en las fuentes, tamaños, etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;El &lt;strong&gt;contenido&lt;/strong&gt; que se guarda &lt;strong&gt;en la base de datos&lt;/strong&gt; esta &lt;strong&gt;mezclado con&lt;/strong&gt; 
 las etiquetas &lt;strong&gt;HTML y CSS&lt;/strong&gt;, todo junto, vamos que no se parece en nada a lo 
 que has introducido en tu editor. Todo esto en principio carece de importancia, 
 pero puede suponer hasta el 20% del tamaño de las páginas de tu sitio, espacio 
 absurdamente desperdiciado en tu BDD. De hecho el contenido XHTML se genera por 
 lo normal cada vez que se visualiza la página de forma dinámica. Si te preocupa 
 el rendimiento, tranquilo, los sistemas de cache están ahí para echarte una 
 mano y que te dejes de preocupar por eso. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distraen la atención&lt;/strong&gt;, el problema de absolutamente todos los editores 
 visuales, incluidos procesadores de texto, el centrarse en el formato y no en 
 el contenido. Una gran mayoría de usuarios desperdicia un tiempo notable 
 preocupándose por más el aspecto visual del documento, que por el contenido del 
 mismo. Que si esto en negrita, que si mejor con esta fuente, que si mejor con 
 la otra... Se desvía la atención de lo importante, el contenido. Mal amigo de 
 la productividad, se tarda bastante más en general, por esta razón, en generar 
 el mismo contenido en un editor &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Son bastante poco flexibles&lt;/strong&gt;, si quieres introducir tu propio HTMl en el 
 contenido (e.g. para tener un control más fino sobre las tablas, yo lo hago en 
 este articulo) puede que te encuentres que lo genera como lo tiene 
 preestablecido, eliminado la estructura que tu quieras darle. Y embeber 
 contenido multimedia o scripts también es frecuentemente un problema, siendo 
 hasta habitual que existan plugins para estos editores para insertar contenidos 
 de sitios como YouTube.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Todos los editores &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt; &lt;strong&gt;aumentan el peso por página y disminuyen la 
 velocidad de carga&lt;/strong&gt;, al necesitar pesado código javascipt que necesita tanto 
 ser descargado como ejecutado por tu navegador. Ya de por si los CMS suelen 
 emplear bastante código javascript, como para encima añadirle un editor visual. 
 Además realizan bastantes llamadas HTTP, ralentizando aún más la velocidad de 
 carga. Ejemplo: tienes un articulo de 80 lineas de texto cuyo contenido XHTML 
 puede pesar tranquilamente de 10 á 20 veces menos que el javascript del editor, 
 ¿no es un poco ridículo?. Aunque muy pocos editores web se preocupan de esto, 
 la verdad, es que hay que pensar que no todo el mundo disfruta de buenas 
 conexiones a la red. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Por último y no menos importante, &lt;strong&gt;no cuidan la accesibilidad&lt;/strong&gt;. El HTML 
 valido que cumpla con los estándares, es esencial para crear páginas con una 
 buena accesibilidad, pensando en aquellos que no lo tienen tan fácil para 
 navegar por nuestros sitios web. Deberían tenerse al menos en cuenta un mínimo 
 de puntos sobre este tema al crear contenidos en la web.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En conclusión, que los editores &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt; pueden no dar problemas hasta que tus 
necesidades cambian, entonces pueden darte más de un quebradero de cabeza. &lt;/p&gt;
&lt;br /&gt;

&lt;h3 id="mark"&gt;Texto plano y Markdown&lt;/h3&gt;
&lt;p&gt;¿Cual sería entonces la solución para esquivar estos problemas? Texto plano, 
nada más, que se transforme automáticamente en HTML valido respetando el formato 
que nosotros queramos darle. Esto existe, y es posible gracias a los lenguajes 
de marcado ligero, entre los que se encuentra &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. Nada mejor que 
empezar demostrándolo con un ejemplo:&lt;/p&gt;
&lt;br /&gt;

&lt;table&gt;
  &lt;thead&gt;&lt;tr&gt;&lt;th style="width: 50%;"&gt;Markdown&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
    &lt;td&gt;&lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo
====================

Lorem ipsum [dolor sit amet](#mark), consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit _sit amet aliquam_ vel, pulvinar molestie augue.

&gt; Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lista numerada (ordenada)

1. Este es el primer elemento
2. Este es el segundo elemento
  * Una lista de puntos anidada
  * Se llama también desordenada
     * Tercer nivel de anidamiento
3. Este es el tercer elemento

![avatar](pictures/avatar.png)

### Cabecera ###

- - -

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

|   | solo texto | HTML Limpio  |
| -------------- | -- | ------- |
| Markdown       | Si | Si      |
| Editor WYSISWG | X  | A veces |

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:::python
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;import lifetime
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for each_day in lifetime.days():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;carpe_diem()

Suspendisse posuere velit et velit vehicula at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.

Esto es un texto con nota al pie [^prima] y esta es otra nota [^secunda]

*[vehicula]: automobila
[^prima]: Esto es una nota al pie.
[^secunda]: Esto es la segunda nota.
&lt;/pre&gt;&lt;/td&gt;
     &lt;td&gt;
&lt;h1&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.&lt;/p&gt;

&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lista numerada (ordenada)&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Este es el primer elemento&lt;/li&gt;
&lt;li&gt;Este es el segundo elemento

&lt;ul&gt;&lt;li&gt;Una lista de puntos anidada&lt;/li&gt;

&lt;li&gt;Se llama también desordenada

&lt;ul&gt;&lt;li&gt;Tercer nivel de anidamiento&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Este es el tercer elemento&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src="pictures/avatar.png" alt="avatar" /&gt;&lt;/p&gt;

&lt;h3&gt;Cabecera&lt;/h3&gt;

&lt;hr /&gt;&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
  &lt;th&gt;solo texto&lt;/th&gt;

&lt;th&gt;HTML Limpio&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Markdown&lt;/td&gt;
  &lt;td&gt;Si&lt;/td&gt;
  &lt;td&gt;Si&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Editor WYSISWG&lt;/td&gt;
  &lt;td&gt;X&lt;/td&gt;
  &lt;td&gt;A veces&lt;/td&gt;

&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lifetime&lt;/span&gt;

&lt;p&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_day&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lifetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="n"&gt;    carpe_diem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Suspendisse posuere velit et velit &lt;abbr title="automobila"&gt;vehicula&lt;/abbr&gt; at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Esto es un texto con nota al pie &lt;sup id="fnref:prima"&gt;&lt;a href="#fn:prima" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; y esta es otra nota &lt;sup id="fnref:secunda"&gt;&lt;a href="#fn:secunda" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr /&gt;&lt;ol&gt;&lt;li id="fn:prima"&gt;
&lt;p&gt;Esto es una nota al pie. &lt;a href="#fnref:prima" rev="footnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn:secunda"&gt;
&lt;p&gt;Esto es la segunda nota. &lt;a href="#fnref:secunda" rev="footnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;p&gt;&lt;/ol&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;Es así de sencillo, el texto plano que se escribe en la columna de la izquierda 
genera el HTML que se puede ver representado en la derecha. Es además HTML 
valido, sin CSS embebido (exceptuando el código con resaltado de sintaxis, pero 
esto es necesario y tampoco es generado por &lt;strong&gt;Markdown&lt;/strong&gt; si no por 
&lt;a href="http://qbnz.com/highlighter/"&gt;GeSHi&lt;/a&gt; anteriormente y ahora por &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;) y empleando el 
mínimo necesario, siendo lo más limpio posible. 
Pero el contenido que se guarda en la base de datos y el que tú editas es el de 
la izquierda. Este contenido generará HTML valido hoy y mañana, es totalmente 
independiente del estilo que emplees en tu página y puedes migrarlo de un CMS a 
otro sin problema alguno. Todo son ventajas, el único inconveniente es que tienes 
que aprender a usar &lt;strong&gt;Markdown&lt;/strong&gt;, algo que es sumamente sencillo, a la par que 
incrementa la legibilidad del texto plano. &lt;/p&gt;
&lt;p&gt;La legibilidad del texto es uno de los pilares fundamentales de &lt;strong&gt;Markdown&lt;/strong&gt;, 
tal y como el mismo autor, &lt;a href="http://en.wikipedia.org/wiki/John_Gruber"&gt;John Gruber&lt;/a&gt;, lo cuenta&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;El objetivo fundamental de diseño para la sintaxis de Markdown es hacerlo tan 
legible como sea posible. La idea es que un documento formateado con Markdown 
debería poder ser publicado tal y como está, como texto plano, sin que parezca 
que ha sido marcado con etiquetas o instrucciones de formateado. Mientras que la 
sintaxis de Markdown ha sido influenciada por muchos filtros texto-a-HTML 
existentes, la principal fuente de inspiración es el formato de los correos 
electronicos en texto plano. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No voy ahora, en este articulo, a enseñarte a emplear &lt;strong&gt;Markdown&lt;/strong&gt;, pero tienes 
una guía de prácticamente todas las posibilidades que te brinda en 
&lt;a href="/pages/markdown.html"&gt;Markdown &amp;amp; Pygments Lexers Cheat Sheet&lt;/a&gt;. 
Además, si somos así de vagos, podemos emplear también algunos editores visuales 
que generan y emplean markdown, como &lt;a href="http://markitup.jaysalvat.com/home/"&gt;markItUP!&lt;/a&gt; o el conocido &lt;a href="http://code.google.com/p/wmd/"&gt;WMD&lt;/a&gt; que 
empleamos en &lt;a href="http://python.majibu.org"&gt;python majibu&lt;/a&gt;. Aunque ambos editores 
solo soportan Markdown estándar, cuando en este sitio también soporto las 
capacidades adicionales de &lt;a href="http://michelf.com/projects/php-markdown/extra/"&gt;Markdown Extra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Todo el contenido de este sitio (exceptuando el automático, como las búsquedas, 
etiquetas, acerca de, ...) está generado empleando &lt;strong&gt;Markdown&lt;/strong&gt; y todo está en 
HTML 5 valido. Un ejemplo del HTML que genera Markdown sería el siguiente:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 50%;"&gt;Markdown&lt;/th&gt;&lt;th&gt;HTML&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo
====================

Lorem ipsum [dolor sit amet](#mark), consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit _sit amet aliquam_ vel, pulvinar molestie augue.
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
&amp;lt;h1&amp;gt;Documento de ejemplo&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;Lorem ipsum &amp;lt;a href="#mark"&amp;gt;dolor sit amet&amp;lt;/a&amp;gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &amp;lt;strong&amp;gt;semper adipiscing leo&amp;lt;/strong&amp;gt; et blandit.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Sed nibh quam, hendrerit &amp;lt;em&amp;gt;sit amet aliquam&amp;lt;/em&amp;gt; vel, pulvinar molestie augue.&amp;lt;/p&amp;gt; 
     &lt;/pre&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como se puede ver es el HTMl justo, limpio y cumpliendo estándares, ni más ni 
menos. Este es un ejemplo muy sencillo, y posiblemente cualquier editor &lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt; 
sea capaz de dar el mismo resultado, el problema aparece con documentos más 
complejos, con sucesivas re-ediciones del texto y con editores mal configurados. 
Eso si, lo que se almacena en la BDD con &lt;strong&gt;Markdown&lt;/strong&gt; es texto plano, con los 
otros editores, el texto, las etiquetas HTML y CSS embebido. &lt;/p&gt;
&lt;h3 id="+porque_markdown_y_no_otros"&gt;¿Porque Markdown y no otros?&lt;/h3&gt;
&lt;p&gt;Evidentemente &lt;strong&gt;Markdown&lt;/strong&gt; no es el único &lt;a href="http://es.wikipedia.org/wiki/Lenguajes_de_marcas_ligeros"&gt;lenguaje de marcado ligero&lt;/a&gt;, 
existen otros también conocidos y extendidos como &lt;a href="http://textile.thresholdstate.com/"&gt;Textile&lt;/a&gt;, &lt;a href="http://www.bbcode.org/"&gt;BBCode&lt;/a&gt;, 
&lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;, &lt;a href="http://texy.info/en/"&gt;Texy!&lt;/a&gt;, &lt;a href="http://txt2tags.org/"&gt;Txt2tags&lt;/a&gt; o los empleados en los Wikis 
como &lt;a href="http://www.wikicreole.org/"&gt;Creole&lt;/a&gt; o el de &lt;a href="http://www.mediawiki.org/wiki/Help:Formatting"&gt;MediaWiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En primer lugar &lt;strong&gt;Markdown&lt;/strong&gt; es uno de los que más características soporta, uno 
de los que más salidas puede generar (no solo HTML, también LaTeX, RTF, PDF, 
EPUB, ...) y además es probablemente el más extendido y soportado de todos 
(exceptuando BBCode y los de los Wikis, empleados en sus nichos particulares). 
Pero también es uno de los más fáciles de emplear (saliendo del formato básico 
como negritas, etc) y que produce un texto plano más vistoso y legible. &lt;/p&gt;
&lt;h3 id="comparativa"&gt;Comparativa&lt;/h3&gt;
&lt;p&gt;Como no, lo mejor, es ver una comparativa co un ejemplo de el mismo documento y 
el texto empleado por cada uno de los lenguajes para generarlo. Para ello he 
creado un articulo aparte para mostrarla.&lt;/p&gt;
&lt;p&gt;&lt;a href="/comparativa-de-lenguajes-de-marcado-ligero.html"&gt;Comparativa&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="+qui+n_emplea_markdown"&gt;¿Quién emplea Markdown?&lt;/h3&gt;
&lt;p&gt;Una de las razones para emplear &lt;strong&gt;Markdown&lt;/strong&gt; es porque es uno de los más 
extendidos, sobre todo en el mundo de la programación. Por ejemplo, 
&lt;a href="http://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; y todos los sitios de &lt;a href="http://stackexchange.com/"&gt;Stack Exchange&lt;/a&gt; emplean una 
variante de Markdown para la entrada de texto. Repositorios de código como 
&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; y &lt;a href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt; también lo emplean para ciertas funciones. 
También lo emplea el sistema de seguimiento de incidencias &lt;a href="http://lighthouseapp.com/"&gt;LightHouse&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Fuera del ámbito de la programación, sitios tan conocidos como &lt;a href="http://www.reddit.com/"&gt;Reddit&lt;/a&gt; lo 
emplean. Plataformas para la educación online como &lt;a href="http://moodle.org/"&gt;Moodle&lt;/a&gt; o 
&lt;a href="http://podmedics.heroku.com/"&gt;Podmedics&lt;/a&gt; también hacen uso de él. Un Wiki como &lt;a href="http://www.instiki.org/"&gt;Instiki&lt;/a&gt; permite 
emplear Markdown. Plataformas de blogs y contenidos como &lt;a href="https://posterous.com/"&gt;Posterous&lt;/a&gt;, 
&lt;a href="http://www.tumblr.com/"&gt;Tumblr&lt;/a&gt; y &lt;a href="http://www.squarespace.com/"&gt;Squarespace&lt;/a&gt; lo ofrecen como opción. Y seguro que me estoy 
dejando en el tintero muchos más lugares donde es empleado habitualmente. &lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta de que aquí no he hablado de software CMS que lo soporta, 
eso lo contemplo en el próximo punto, si no más bien de organizaciones/compañías.&lt;/p&gt;
&lt;h3 id="excusas_para_no_emplearlo"&gt;Excusas para no emplearlo&lt;/h3&gt;
&lt;p&gt;La primera que dice todo el mundo, es un incordio usarlo y aprenderlo, la 
pregunta es: ¿Has intentado emplearlo? Créeme se aprende en nada, sobre la 
marcha, y una vez que te acostumbras a él, lo elegirás frente a los editores 
&lt;abbr title="What You See Is What You Get (en inglés, &amp;quot;lo que ves es lo que obtienes&amp;quot;)"&gt;WYSIWYG&lt;/abbr&gt;, casi con toda seguridad. Una vez aprendido no tienes qune separar los 
dedos de tu teclado, no necesitas para nada el ratón para crear tu contenido. 
Ganarás mucho tiempo para ti mismo y lo agredeceras, créeme.&lt;/p&gt;
&lt;p&gt;La segunda, no puedo usarlo en mi CMS o blog. ¿Seguro? A continuación te detallo 
las opciones que conozco para publicar contenidos empleando &lt;strong&gt;Markdown&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id="cms_y_blogs"&gt;CMS y Blogs:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Por defecto, como opción o nativamente:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nestacms.com/"&gt;Nesta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kohanut.com/"&gt;Kohanut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.movabletype.org/"&gt;MovableType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fdv.github.com/typo/"&gt;Typo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con añadidos:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://drupal.org/"&gt;Drupal&lt;/a&gt; A través de un modulo, &lt;a href="http://drupal.org/project/markdown"&gt;Markdown Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wordpress.org/"&gt;Wordpress&lt;/a&gt; Hay varios plugins disponibles para emplearlo.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djangoproject.com/"&gt;Django&lt;/a&gt; Hay varias formas de soportarlo.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plone.org"&gt;Plone&lt;/a&gt; Se puede habilitar a través de un modulo.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogger.com"&gt;Blogger&lt;/a&gt; A través de algunos proyectos externos, &lt;a href="http://code.google.com/p/blogger-markdown-editor/"&gt;Blogger-markdown-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://expressionengine.com/"&gt;ExpressionEngine&lt;/a&gt; A través de un plugin.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.joomla.org/"&gt;Joomla&lt;/a&gt; A través de una extensión, &lt;a href="http://extensions.joomla.org/extensions/edition/code-display/8391"&gt;jMarkdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="generadores_de_sitios_con_contenido_est+tico_html"&gt;Generadores de sitios con contenido estático (HTML):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ametaireau/pelican/"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ringce.com/hyde"&gt;hyde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogofile.com/"&gt;Blogofile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/obensonne/poole/src"&gt;Poole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xfire/growl/tree"&gt;Growl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://markdoc.org/"&gt;Markdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webgen.rubyforge.org/"&gt;Webgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nanoc.stoneship.org/"&gt;nanoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jekyllrb.com/"&gt;jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webby.rubyforge.org/"&gt;Webby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cloudhead.io/toto"&gt;toto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rote.rubyforge.org/"&gt;Rote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wiki"&gt;Wiki:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Por defecto, como opción o nativamente:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://instiki.org"&gt;Instiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ikiwiki.info/"&gt;ikiwiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sputnik.freewisdom.org/"&gt;sputnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alt.textdrive.com/nanoki/"&gt;nanoki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/gitit"&gt;gitit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con añadidos: &lt;ul&gt;
&lt;li&gt;&lt;a href="http://moinmo.in/"&gt;MoinMoin&lt;/a&gt; con una &lt;a href="http://moinmo.in/ParserMarket/Markdown"&gt;extensión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mediawiki.org"&gt;MediaWiki&lt;/a&gt; con una &lt;a href="http://www.mediawiki.org/wiki/Extension:MarkdownSyntax"&gt;extensión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dokuwiki.org/"&gt;DokuWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oddmuse.org/"&gt;Oddmuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pmwiki.org/"&gt;PmWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foros"&gt;Foros:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.phpbb.com/"&gt;phpBB&lt;/a&gt; A través de un 
&lt;a href="http://www.phpbb.com/community/viewtopic.php?f=70&amp;amp;t=2093183"&gt;MOD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conversor_markdown_desdea_otros_formatos"&gt;Conversor Markdown desde/a otros formatos:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://johnmacfarlane.net/pandoc/try"&gt;Pandoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="editores_de_texto_que_lo_soportan_marcado_de_sintaxis"&gt;Editores de Texto que lo soportan (marcado de sintaxis):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt; con &lt;a href="https://github.com/plasticboy/vim-markdown"&gt;Vim-Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; con &lt;a href="http://jblevins.org/projects/markdown-mode/"&gt;markdown-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://projects.gnome.org/gedit/"&gt;Gedit&lt;/a&gt; con &lt;a href="http://live.gnome.org/Gedit/MarkdownSupport"&gt;gedit-markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; con el experimental &lt;a href="http://www.winterwell.com/software/markdown-editor.php"&gt;markdown editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codingmonkeys.de/subethaedit/"&gt;SubEthaEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ecto.kung-foo.tv/"&gt;Ecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="editor_markdown"&gt;Editor Markdown:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/p/retext/home/"&gt;ReText&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="editor_offline_para_blogs"&gt;Editor Offline para blogs:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qtm.blogistan.co.uk/"&gt;QTM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="editores_online_para_probar_markdown"&gt;Editores Online para probar Markdown:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://daringfireball.net/projects/markdown/dingus"&gt;Dingus&lt;/a&gt; por &lt;a href="http://daringfireball.net/"&gt;John Gruber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michelf.com/projects/php-markdown/dingus/"&gt;Dingus PHP&lt;/a&gt; por Michel Fortin&lt;/li&gt;
&lt;li&gt;&lt;a href="http://anthonybush.com/markdown_extra_geshi/"&gt;Markdown Extra + GeShi&lt;/a&gt; por Anthony Bush&lt;/li&gt;
&lt;li&gt;&lt;a href="http://babelmark.bobtfish.net/?markdown=*This+**is+a+test*.&amp;amp;normalize=on"&gt;Babelmark&lt;/a&gt; para comparar las distintas implementaciones de Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joncom.be/experiments/markdown-editor/edit/"&gt;Markdown Editor&lt;/a&gt; por John Combe&lt;/li&gt;
&lt;li&gt;&lt;a href="http://softwaremaniacs.org/playground/showdown-highlight/"&gt;Showdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://markdownr.com/"&gt;Markdownr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y si eres desarrollador, tienes disponibles distintas implementaciones de Markdown:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lenguaje&lt;/th&gt;
&lt;th&gt;Implementaciones&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.freewisdom.org/projects/python-markdown/"&gt;Python-markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;&lt;a href="http://michelf.com/projects/php-markdown/"&gt;PHP Markdown y PHP Markdown Extra&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perl&lt;/td&gt;
&lt;td&gt;&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Original&lt;/a&gt; y &lt;a href="https://github.com/fletcher/MultiMarkdown"&gt;MultiMarkdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;a href="http://deveiate.org/projects/BlueCloth"&gt;BlueCloth&lt;/a&gt;, &lt;a href="https://github.com/nex3/maruku"&gt;Maruku&lt;/a&gt; y &lt;a href="http://kramdown.rubyforge.org/"&gt;Kramdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;&lt;a href="http://aspnetresources.com/blog/markdown_announced"&gt;Markdown.NET&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.pell.portland.or.us/~orc/Code/markdown/"&gt;Discount&lt;/a&gt; y &lt;a href="https://github.com/jgm/peg-markdown"&gt;Peg-Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href="http://cpp-markdown.sourceforge.net/"&gt;Cpp-markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href="http://sourceforge.net/projects/markdownj/"&gt;MarkdownJ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Javascript&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/coreyti/showdown"&gt;Showdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lua&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.frykholm.se/files/markdown.lua"&gt;markdown.lua&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Haskell&lt;/td&gt;
&lt;td&gt;&lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Common Lisp&lt;/td&gt;
&lt;td&gt;&lt;a href="http://common-lisp.net/project/cl-markdown/"&gt;CL-Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scala&lt;/td&gt;
&lt;td&gt;&lt;a href="http://tristanhunt.com/projects/knockoff/"&gt;Knockoff&lt;/a&gt; y &lt;a href="http://henkelmann.eu/projects/actuarius/"&gt;Actuarius&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Entonces, habiendo tantas opciones, ¿por qué no lo pruebas?&lt;/p&gt;
&lt;p&gt;Y si hay más excusas, pues la verdad, no las conozco, dímelas tú.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The overriding design goal for Markdown’s formatting syntax is to make 
it as readable as possible. The idea is that a Markdown-formatted document 
should be publishable as-is, as plain text, without looking like it’s been 
marked up with tags or formatting instructions. While Markdown’s syntax has 
been influenced by several existing text-to-HTML filters, the single biggest 
source of inspiration for Markdown’s syntax is the format of plain text 
email. &lt;a href="http://daringfireball.net/projects/markdown/"&gt;fuente&lt;/a&gt;&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">joe di castro</dc:creator><pubDate>Sat, 02 Apr 2011 20:29:00 -0000</pubDate><category>markdown</category><category>WYSIWYG</category><category>Textile</category><category>editores</category><category>marcado</category><category>HTML</category><category>XHTML</category></item><item><title>Comparativa de Lenguajes de marcado ligero</title><link>http://joedicastro.com/comparativa-de-lenguajes-de-marcado-ligero.html</link><description>&lt;p&gt;Esta es una comparativa de los lenguajes de marcado ligero más empleados de los 
disponibles actualmente. Dicha comparativa surge a partir de este articulo, 
&lt;a href="/markdown-la-mejor-opcion-para-crear-contenidos-web.html"&gt;Markdown, la mejor opción para crear contenidos web&lt;/a&gt;, donde defiendo la 
idoneidad de markdown para crear contenidos web.&lt;/p&gt;
&lt;p&gt;En esta comparativa se verá como emplear cada uno de los lenguajes de marcado 
disponibles para crear un contenido web similar. Tomo como referencia a markdown, 
aunque no todos los lenguajes soportan todas o las mismas características que 
este.&lt;/p&gt;
&lt;h2 id="documento_de_ejemplo_realizado_con_markdown"&gt;Documento de ejemplo realizado con Markdown&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 50%;"&gt;Markdown&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo
====================

Lorem ipsum [dolor sit amet](#mark), consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit _sit amet aliquam_ vel, pulvinar molestie augue.

&gt; Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

* **Markdown**
 * Textile
 * reStructuredText
 * Texy!
 * Txt2tags
 * Marcado Wiki
   1. Creole
   2. MediaWiki

![avatar](pictures/no_wysiwyg.png)

### Cabecera H3 ###

- - -

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

|   | solo texto | HTML Limpio  |
| -------------- | -- | ------- |
| Markdown       | Si | Si      |
| Editor WYSISWG | X  | A veces |

_Ejemplo de código_

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;import lifetime
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for each_day in lifetime.days():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;carpe_diem()

Suspendisse posuere velit et velit vehicula at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.

Esto es un texto con nota al pie [^ejemplo] y esta es otra nota [^segunda]

*[vehicula]: automobila
[^ejemplo]: Esto es una nota al pie.
[^segunda]: Esto es la segunda nota.
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h1&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.&lt;/p&gt;

&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.&lt;/p&gt;

&lt;blockquote&gt; 
  &lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt; 
&lt;/blockquote&gt;

&lt;p&gt;Lenguajes de marcado ligero&lt;/p&gt;

&lt;ul&gt; 
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/li&gt; 
&lt;li&gt;Textile&lt;/li&gt; 
&lt;li&gt;reStructuredText&lt;/li&gt; 
&lt;li&gt;Texy!&lt;/li&gt; 
&lt;li&gt;Txt2tags&lt;/li&gt; 
&lt;li&gt;Marcado Wiki

&lt;ol&gt; 
&lt;li&gt;Creole&lt;/li&gt; 
&lt;li&gt;MediaWiki&lt;/li&gt; 
&lt;/ol&gt;&lt;/li&gt; 
&lt;/ul&gt;

&lt;p&gt;&lt;img src="pictures/no_wysiwyg.png" alt="avatar" /&gt;&lt;/p&gt;

&lt;h3&gt;Cabecera H3&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;

&lt;table&gt; 
&lt;thead&gt; 
&lt;tr&gt; 
  &lt;th&gt;&lt;/th&gt; 
  &lt;th&gt;solo texto&lt;/th&gt; 
  &lt;th&gt;HTML Limpio&lt;/th&gt; 
&lt;/tr&gt; 
&lt;/thead&gt; 
&lt;tbody&gt; 
&lt;tr&gt; 
  &lt;td&gt;Markdown&lt;/td&gt; 
  &lt;td&gt;Si&lt;/td&gt; 
  &lt;td&gt;Si&lt;/td&gt; 
&lt;/tr&gt; 
&lt;tr&gt; 
  &lt;td&gt;Editor WYSISWG&lt;/td&gt; 
  &lt;td&gt;X&lt;/td&gt; 
  &lt;td&gt;A veces&lt;/td&gt; 
&lt;/tr&gt; 
&lt;/tbody&gt; 
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Ejemplo de código&lt;/em&gt;&lt;/p&gt;

&lt;pre class="txt" style="font-family:monospace;"&gt;import lifetime
&amp;nbsp;
for each_day in lifetime.days():
    carpe_diem()&lt;/pre&gt;

&lt;p&gt;Suspendisse posuere velit et velit &lt;abbr title="automobila"&gt;vehicula&lt;/abbr&gt; at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.&lt;/p&gt;

&lt;p&gt;Esto es un texto con nota al pie &lt;sup id="fnref:ejemplo"&gt;&lt;a href="#fn:ejemplo" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; y esta es otra nota &lt;sup id="fnref:segunda"&gt;&lt;a href="#fn:segunda" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt; 
&lt;hr /&gt; 
&lt;ol&gt;

&lt;li id="fn:ejemplo"&gt; 
&lt;p&gt;Esto es una nota al pie.&amp;#160;&lt;a href="#fnref:ejemplo" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; 
&lt;/li&gt;

&lt;li id="fn:segunda"&gt; 
&lt;p&gt;Esto es la segunda nota.&amp;#160;&lt;a href="#fnref:segunda" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; 
&lt;/li&gt;

&lt;p&gt;&lt;/ol&gt; 
&lt;/div&gt; 
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="textile"&gt;Textile&lt;/h2&gt;
&lt;p&gt;Es una buena alternativa a Markdown y bastante extendido, aunque quizás menos 
que Markdown. Tiene algunas posibilidades que no tiene Markdown como emplear 
colores, poder alinear el texto o emplear superindice y subindice. También tiene 
carencias como el no poder dibujar líneas horizontales o el poder emplear 
acronimos solo con mayusculas y tener que declararlos en cada una de las partes 
del texto que aparezcan. Pero quiźas para mi la mayor desventaja es la menor 
legibilidad del texto, es menos evidente a un vistazo que markdown.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 50%;"&gt;Textile&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
h1. Documento de ejemplo

Lorem ipsum "dolor sit amet":#mark, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit _sit amet aliquam_ vel, pulvinar molestie augue.

bq. Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

* **Markdown**
* Textile
* reStructuredText
* Texy!
* Txt2tags
* Marcado Wiki
## Creole
## MediaWiki

!pictures/no_wysiwyg.png (avatar)!

h3. Cabecera H3

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

|_. @@|_. solo texto|_. HTML Limpio|
|Markdown|Si|Si|
|Editor WYSISWG|X|A veces|

_Ejemplo de código_

bc.. import lifetime

for each_day in lifetime.days():
    carpe_diem()

p. Suspendisse posuere velit et velit VEHICULA(automobila) at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.

Esto es un texto con nota al pie[1] y esta es otra nota[2]

fn1. Esto es una nota al pie.

fn2. Esto es la segunda nota.
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h1&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;b&gt;semper adipiscing leo&lt;/b&gt; et blandit.&lt;/p&gt;

&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lenguajes de marcado ligero &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Markdown&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;Textile&lt;/li&gt;
    &lt;li&gt;reStructuredText&lt;/li&gt;
    &lt;li&gt;Texy!&lt;/li&gt;
    &lt;li&gt;Txt2tags&lt;/li&gt;
    &lt;li&gt;Marcado Wiki
&lt;ol&gt;
    &lt;li&gt;Creole&lt;/li&gt;
    &lt;li&gt;MediaWiki&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="pictures/no_wysiwyg.png" title="avatar" alt="avatar" /&gt;&lt;/p&gt;

&lt;h3&gt;Cabecera H3&lt;/h3&gt;

&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;
        &lt;th&gt;solo texto&lt;/th&gt;
        &lt;th&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/span&gt; Limpio&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Markdown&lt;/td&gt;
        &lt;td&gt;Si&lt;/td&gt;
        &lt;td&gt;Si&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Editor &lt;span class="caps"&gt;&lt;span class="caps"&gt;WYSISWG&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;X&lt;/td&gt;
        &lt;td&gt;A veces&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Ejemplo de código&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
import lifetime

for each_day in lifetime.days():
    carpe_diem()
&lt;/pre&gt;

&lt;p&gt;Suspendisse posuere velit et velit &lt;acronym title="automobila"&gt;&lt;span class="caps"&gt;VEHICULA&lt;/span&gt;&lt;/acronym&gt; at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.&lt;/p&gt;

&lt;p&gt;Esto es un texto con nota al pie&lt;sup class="footnote"&gt;&lt;a href="#fn8701048694d94660b0d4d4"&gt;1&lt;/a&gt;&lt;/sup&gt; y esta es otra nota&lt;sup class="footnote"&gt;&lt;a href="#fn13831162204d94660b122f5"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p id="fn8701048694d94660b0d4d4" class="footnote"&gt;&lt;sup&gt;1&lt;/sup&gt; Esto es una nota al pie.&lt;/p&gt;

&lt;p id="fn13831162204d94660b122f5" class="footnote"&gt;&lt;sup&gt;2&lt;/sup&gt; Esto es la segunda nota.&lt;/p&gt;

&lt;p&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="bbcode"&gt;BBCode&lt;/h2&gt;
&lt;p&gt;Es uno de los más extendido porque es ampliamente usado en foros por toda la red. 
Nació para ser empleado en foros y es prácticamente el único ámbito en el que se 
emplea. Es también muy limitado porque no soporta muchas de las características 
de los otros lenguajes y además hay múltiples variantes que no ayudan a crear un 
estándar. Por ejemplo las listas y las tablas no son contempladas en algunas de 
esas variantes.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 50%;"&gt;BBCode&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo

Lorem ipsum [url=http://joedicastro.com]dolor sit amet[/url], consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum [b]semper adipiscing leo[/b] et blandit.

Sed nibh quam, hendrerit [i]sit amet aliquam[/i] vel, pulvinar molestie augue.

[quote]Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.[/quote]

[img]http://joedicastro/files/
imagenes/no_wysiwyg.png[/img]

Cabecera H3

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

[i]Ejemplo de codigo[/i]

[code]
import lifetime

for each_day in lifetime.days():
    carpe_diem()
[/code]
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;div&gt;
&lt;p&gt;
Documento de ejemplo&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Lorem ipsum &lt;a href="http://joedicastro.com" target="_new"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.
&lt;/p&gt;
&lt;p&gt;
Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="pictures/no_wysiwyg.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Cabecera H3&lt;/p&gt;
&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;
&lt;em&gt;Ejemplo de codigo&lt;/em&gt;
&lt;pre class="code"&gt;
import lifetime

for each_day in lifetime.days():
carpe_diem()
&lt;/pre&gt;&lt;/div&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
&lt;h2 id="restructuredtext"&gt;reStructuredText&lt;/h2&gt;
&lt;p&gt;Fue creado para crear documentación, en concreto documentación para lenguajes de 
programación como Python. Tiene algunas carencias al no estar orientado a HTML, 
pero también tiene posibilidades de las que carece Markdown. Es muy potente, 
bastante legible, pero un poco incomodo para según que cosas, a mi modo de ver. &lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 53%;"&gt;reStructuredText&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo
====================

Lorem ipsum `dolor sit amet &lt;#mark&gt;`_, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit *sit amet aliquam* vel, pulvinar molestie augue.

Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

&amp;nbsp;* **Markdown**
&amp;nbsp;* Textile
&amp;nbsp;* reStructuredText
&amp;nbsp;* Texy!
&amp;nbsp;* Txt2tags
&amp;nbsp;* Marcado Wiki

&amp;nbsp;&amp;nbsp;&amp;nbsp;1. Creole
&amp;nbsp;&amp;nbsp;&amp;nbsp;2. MediaWiki

.. image:: pictures/no_wysiwyg.png
   :alt: avatar

---------------

Cabecera H3
^^^^^^^^^^^

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

============== ========== ===========
\              solo texto HTML Limpio
============== ========== ===========
Markdown           Si         Si      
Editor WYSISWG     X        A veces 
============== ========== ===========

*Ejemplo de código*::

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;import lifetime

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for each_day in lifetime.days():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;carpe_diem()

Suspendisse posuere velit et velit vehicula at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.

Esto es un texto con nota al pie [1]_ y esta es otra nota [2]_

.. [1] Esto es una nota al pie.
.. [2] Esto es la segunda nota.
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h1 id="documento-de-ejemplo"&gt;Documento de ejemplo&lt;/h1&gt;
&lt;p&gt;Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.&lt;/p&gt;
&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lenguajes de marcado ligero&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;reStructuredText&lt;/li&gt;
&lt;li&gt;Texy!&lt;/li&gt;
&lt;li&gt;Txt2tags&lt;/li&gt;
&lt;li&gt;Marcado Wiki
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Creole&lt;/li&gt;
&lt;li&gt;MediaWiki&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p /&gt;
&lt;img src="pictures/no_wysiwyg.png" alt="avatar" /&gt;
&lt;hr /&gt;
&lt;h2 id="cabecera-h3"&gt;Cabecera H3&lt;/h2&gt;
&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th align="left"&gt; &lt;/th&gt;
&lt;th align="left"&gt;solo texto&lt;/th&gt;
&lt;th align="left"&gt;HTML Limpio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;Markdown&lt;/td&gt;
&lt;td align="left"&gt;Si&lt;/td&gt;
&lt;td align="left"&gt;Si&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;Editor WYSISWG&lt;/td&gt;
&lt;td align="left"&gt;X&lt;/td&gt;
&lt;td align="left"&gt;A veces&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Ejemplo de código&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;import lifetime

&lt;p&gt;for each_day in lifetime.days():
    carpe_diem()
&lt;/pre&gt;
&lt;p&gt;Suspendisse posuere velit et velit vehicula at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.&lt;/p&gt;
&lt;p&gt;Esto es un texto con nota al pie &lt;sup&gt;&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;1&lt;/a&gt;&lt;/sup&gt; y esta es otra nota &lt;sup&gt;&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Esto es una nota al pie. &lt;a href="#fnref1" class="footnoteBackLink" title="Jump back to footnote 1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Esto es la segunda nota. &lt;a href="#fnref2" class="footnoteBackLink" title="Jump back to footnote 2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="texy"&gt;Texy!&lt;/h2&gt;
&lt;p&gt;Fue específicamente diseñado para crear documentos XHTML, por ello es bastante 
completo, pero no está muy extendido. Es legible, pero también tiene carece de 
soporte para ciertos tags de HTML.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 53%;"&gt;Texy!&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
Documento de ejemplo
====================

Lorem ipsum [dolor sit amet | http://joedicastro.com], consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit *sit amet aliquam* vel, pulvinar molestie augue.

&gt; Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

- **Markdown**
- Textile
- reStructuredText
- Texy!
- Txt2tags
- Marcado Wiki
 1) Creole
 2) MediaWiki

[* pictures/no_wysiwyg.png .(alt text)[avatar] *]

### Cabecera H3 ###

-----

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

|------------------------------
|   | solo texto | HTML Limpio  
|------------------------------
| Markdown       | Si | Si      
| Editor WYSISWG | X  | A veces

*Ejemplo de código*

/---code
&amp;nbsp;&amp;nbsp;import lifetime

&amp;nbsp;&amp;nbsp;for each_day in lifetime.days():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;carpe_diem()
\---

Suspendisse posuere velit et velit "vehicula"((automobila)) at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;

&lt;h1 id="toc-documento-de-ejemplo"&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;Lorem ipsum &lt;a href="http://joedicastro.com"&gt;dolor sit amet&lt;/a&gt;, consectetur
adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id
rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula.
Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.&lt;/p&gt;

&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar
molestie&amp;nbsp;augue.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel
    convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis,
    ultrices pharetra&amp;nbsp;nunc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lenguajes de marcado ligero&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Textile&lt;/li&gt;

&lt;li&gt;reStructuredText&lt;/li&gt;

&lt;li&gt;Texy!&lt;/li&gt;

&lt;li&gt;Txt2tags&lt;/li&gt;

&lt;li&gt;Marcado Wiki
        &lt;ol&gt;
            &lt;li&gt;Creole&lt;/li&gt;

&lt;li&gt;MediaWiki&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;&lt;img src="pictures/no_wysiwyg.png" class="avatar"
alt="alt text"&gt;&lt;/div&gt;

&lt;h1 id="toc-cabecera-h3"&gt;Cabecera H3&lt;/h1&gt;

&lt;hr&gt;

&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce
dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui
fermentum vitae blandit risus aliquet.&lt;/p&gt;

&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;

&lt;th&gt;solo texto&lt;/th&gt;

&lt;th&gt;HTML Limpio&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;

&lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Markdown&lt;/td&gt;

&lt;td&gt;Si&lt;/td&gt;

&lt;td&gt;Si&lt;/td&gt;
        &lt;/tr&gt;

&lt;tr&gt;
            &lt;td&gt;Editor WYSISWG&lt;/td&gt;

&lt;td&gt;X&lt;/td&gt;

&lt;td&gt;A&amp;nbsp;veces&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Ejemplo de código&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;import lifetime

for each_day in lifetime.days():
    carpe_diem()&lt;/pre&gt;

&lt;p&gt;Suspendisse posuere velit et velit &lt;acronym
title="automobila"&gt;vehicula&lt;/acronym&gt; at scelerisque orci suscipit. Nulla
facilisis lorem eu sem viverra varius nec ut&amp;nbsp;felis.&lt;/p&gt;

&lt;p&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="txt2tags"&gt;txt2tags&lt;/h2&gt;
&lt;p&gt;Está escrito en Python y es muy potente, al igual que RestructuredText, 
permitiendo macros. Permite la salida en muchos formatos, incluido el XHTML. 
Es muy legible y muy fácil de emplear, es una pena que no esté más extendido y 
soportado. Aunque aún tiene algunas carencias como las notas al pie o las 
abreviaturas, que pueden ser soportadas con macros, también tiene un desarrollo 
muy activo. En la futura versión 3.0 serán soportados directamente las notas al 
pie. Es una alternativa con muy buen futuro.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 53%;"&gt;txt2tags&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
=Documento de ejemplo=

Lorem ipsum [dolor sit amet #mark], consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit //sit amet aliquam// vel, pulvinar molestie augue.

&lt;tab&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

- **Markdown**
 - Textile
 - reStructuredText
 - Texy!
 - Txt2tags
 - Marcado Wiki
  + Creole
  + MediaWiki

[pictures/no_wysiwyg.png]

===Cabecera H3===

--------------------

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

||   | solo texto | HTML Limpio
| Markdown       |  Si  |  Si  |
| Editor WYSISWG |  X  |  A veces  |

//Ejemplo de codigo//

```
import lifetime

for each_day in lifetime.days():
    carpe_diem()
```
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h1&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;
Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;b&gt;semper adipiscing leo&lt;/b&gt; et blandit.
&lt;/p&gt;
&lt;p&gt;
Sed nibh quam, hendrerit &lt;i&gt;sit amet aliquam&lt;/i&gt; vel, pulvinar molestie augue.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Lenguajes de marcado ligero 
&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;Markdown&lt;/b&gt;
 &lt;li&gt;Textile
 &lt;li&gt;reStructuredText
 &lt;li&gt;Texy!
 &lt;li&gt;Txt2tags
 &lt;li&gt;Marcado Wiki
  &lt;ol&gt;
  &lt;li&gt;Creole
  &lt;li&gt;MediaWiki
  &lt;/ol&gt;
 &lt;/ul&gt;

&lt;p&gt;
&lt;img src="pictures/no_wysiwyg.png" alt=""&gt;
&lt;/p&gt;

&lt;h3&gt;Cabecera H3&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;
Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.
&lt;/p&gt;

&lt;table cellapadding="4"&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;solo texto&lt;/th&gt;
    &lt;th&gt;HTML Limpio&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Markdown&lt;/td&gt;
    &lt;td align="center"&gt;Si&lt;/td&gt;
    &lt;td align="center"&gt;Si&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Editor WYSISWG&lt;/td&gt;
    &lt;td align="center"&gt;X&lt;/td&gt;
    &lt;td align="center"&gt;A veces&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
 &lt;i&gt;Ejemplo de codigo&lt;/i&gt;
&lt;/p&gt;

&lt;pre&gt;
import lifetime

for each_day in lifetime.days():
    carpe_diem()
&lt;/pre&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
&lt;h2 id="creole"&gt;Creole&lt;/h2&gt;
&lt;p&gt;Creado a partir de los lenguajes más empleados en los Wikis y usado 
fundamentalmente en Wikis, por lo que también tiene ciertas carencias.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 50%;"&gt;Creole&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
== Documento de ejemplo ==

Lorem ipsum [[#mark|dolor sit amet]], consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum **semper adipiscing leo** et blandit.

Sed nibh quam, hendrerit //sit amet aliquam// vel, pulvinar molestie augue.

&gt; Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.

Lenguajes de marcado ligero

* **Markdown**
 * Textile
 * reStructuredText
 * Texy!
 * Txt2tags
 * Marcado Wiki
 ## Creole
 ## MediaWiki

{{pictures/no_wysiwyg.png|avatar}}

==== Cabecera H3 ====

-----

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

|= |= solo texto |= HTML Limpio |
| Markdown       | Si | Si      |
| Editor WYSISWG | X  | A veces |

//Ejemplo de código//
{{{
import lifetime

for each_day in lifetime.days():
    carpe_diem()
}}}
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h1&gt;Documento de ejemplo&lt;/h1&gt;

&lt;p&gt;Lorem ipsum &lt;a href="#mark"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;strong&gt;semper adipiscing leo&lt;/strong&gt; et blandit.&lt;/p&gt;
&lt;p&gt;Sed nibh quam, hendrerit &lt;em&gt;sit amet aliquam&lt;/em&gt; vel, pulvinar molestie augue.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lenguajes de marcado ligero &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt;
&lt;/li&gt;&lt;li&gt;Textile
&lt;/li&gt;&lt;li&gt;reStructuredText
&lt;/li&gt;&lt;li&gt;Texy!
&lt;/li&gt;&lt;li&gt;Txt2tags
&lt;/li&gt;&lt;li&gt;Marcado Wiki
&lt;ol&gt;&lt;li&gt;Creole
&lt;/li&gt;&lt;li&gt;MediaWiki
&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src="pictures/no_wysiwyg.png" alt="avatar" title="avatar" /&gt;&lt;/p&gt;
&lt;h3&gt;Cabecera H3&lt;/h3&gt;
&lt;p&gt;-----&lt;/p&gt;
&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;

&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;solo texto&lt;/th&gt;&lt;th&gt;HTML Limpio&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Markdown&lt;/td&gt;&lt;td&gt;Si&lt;/td&gt;&lt;td&gt;Si&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Editor WYSISWG&lt;/td&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;A veces&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Ejemplo de código&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
import lifetime

&lt;p&gt;for each_day in lifetime.days():
    carpe_diem()
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="mediawiki"&gt;MediaWiki&lt;/h2&gt;
&lt;p&gt;Quizás el más extendido, no en vano MediaWiki es el Wiki empleado por la 
Wikipedia. Igual que Creole, tiene ciertas limitaciones que suple con plugins y 
etiquetas HTML. No me acaba de gustar. La manera que tiene de crear tablas - 
por ejemplo - aunque potente, no me parece nada legible en texto plano.&lt;br /&gt;
&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style="width: 53%;"&gt;MediaWiki&lt;/th&gt;&lt;th&gt;Resultado&lt;/th&gt;
  &lt;/tr&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;pre class="no_mrkdwn"&gt;
==Documento de ejemplo==

Lorem ipsum [http://joedicastro.com dolor sit amet], consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum '''semper adipiscing leo''' et blandit.

Sed nibh quam, hendrerit ''sit amet aliquam'' vel, pulvinar molestie augue.

&lt;blockquote&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/blockquote&gt;

Lenguajes de marcado ligero

* '''Markdown'''
* Textile
* reStructuredText
* Texy!
* Txt2tags
* Marcado Wiki
*# Creole
*# MediaWiki

[[File:pictures/no_wysiwyg.png|caption]]

=== Cabecera H3 ===

----

Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.

{| 
! 
! solo texto
! HTML Limpio
|-
|Markdown
|Si
|Si
|-
|Editor WYSISWG
|X
|A veces
|}

''Ejemplo de código''

&amp;nbsp;&amp;nbsp;import lifetime
&amp;nbsp;&amp;nbsp; 
&amp;nbsp;&amp;nbsp;for each_day in lifetime.days():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;carpe_diem()

Suspendisse posuere velit et velit &lt;span title="automobila"&gt;vehicula&lt;/span&gt; at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.

Esto es un texto con nota al pie &lt;ref name="ejemplo"&gt;Esto es una nota al pie.&lt;/ref&gt; y esta es otra nota &lt;ref name="segunda"&gt; Esto es la segunda nota.&lt;/ref&gt;

{{reflist}}
    &lt;/pre&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;h2&gt;&lt;span class="mw-headline" id="Documento_de_ejemplo"&gt;Documento de ejemplo&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Lorem ipsum &lt;a href="http://joedicastro.com" class="external text" rel="nofollow"&gt;dolor sit amet&lt;/a&gt;, consectetur adipiscing elit. Curabitur eget ante nunc. Pellentesque a tortor ipsum, id rhoncus orci. Quisque leo sapien, rutrum id convallis id, rutrum in ligula. Vestibulum &lt;b&gt;semper adipiscing leo&lt;/b&gt; et blandit.&lt;/p&gt;

&lt;p&gt;Sed nibh quam, hendrerit &lt;i&gt;sit amet aliquam&lt;/i&gt; vel, pulvinar molestie augue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Integer cursus, nunc eu ultrices pellentesque, eros leo malesuada turpis, vel convallis neque dolor a nunc. Sed lacus risus, condimentum vitae posuere quis, ultrices pharetra nunc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lenguajes de marcado ligero&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Markdown&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;reStructuredText&lt;/li&gt;

&lt;li&gt;Texy!&lt;/li&gt;
&lt;li&gt;Txt2tags&lt;/li&gt;
&lt;li&gt;Marcado Wiki
&lt;ol&gt;
&lt;li&gt;Creole&lt;/li&gt;
&lt;li&gt;MediaWiki&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="pictures/no_wysiwyg.png" alt="" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="mw-headline" id="Cabecera_H3"&gt;Cabecera H3&lt;/span&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;Morbi erat augue, feugiat eu pellentesque eget, hendrerit quis lectus. Fusce dignissim pretium nibh sed dignissim. Pellentesque lobortis ante eu dui fermentum vitae blandit risus aliquet.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;solo texto&lt;/th&gt;
&lt;th&gt;HTML Limpio&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Markdown&lt;/td&gt;
&lt;td&gt;Si&lt;/td&gt;
&lt;td&gt;Si&lt;/td&gt;

&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Editor WYSISWG&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;A veces&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;i&gt;Ejemplo de código&lt;/i&gt;&lt;/p&gt;
&lt;pre&gt;
import lifetime

&lt;p&gt;for each_day in lifetime.days():
    carpe_diem()&lt;/p&gt;
&lt;p&gt;&lt;/pre&gt;
&lt;p&gt;Suspendisse posuere velit et velit &lt;span title="automobila"&gt;vehicula&lt;/span&gt; at scelerisque orci suscipit. Nulla facilisis lorem eu sem viverra varius nec ut felis.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Esto es un texto con nota al pie &lt;sup id="cite_ref-ejemplo_0-0" class="reference"&gt;&lt;a href="#cite_note-ejemplo-0"&gt;&lt;span&gt;[&lt;/span&gt;1&lt;span&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; y esta es otra nota &lt;sup id="cite_ref-segunda_1-0" class="reference"&gt;&lt;a href="#cite_note-segunda-1"&gt;&lt;span&gt;[&lt;/span&gt;2&lt;span&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class="reflist" style="list-style-type: decimal;"&gt;
&lt;ol class="references"&gt;
&lt;li id="cite_note-ejemplo-0"&gt;&lt;b&gt;&lt;a href="#cite_ref-ejemplo_0-0"&gt;^&lt;/a&gt;&lt;/b&gt; Esto es una nota al pie.&lt;/li&gt;
&lt;li id="cite_note-segunda-1"&gt;&lt;b&gt;&lt;a href="#cite_ref-segunda_1-0"&gt;^&lt;/a&gt;&lt;/b&gt; Esto es la segunda nota.&lt;/li&gt;

&lt;p&gt;&lt;/ol&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">joe di castro</dc:creator><pubDate>Sat, 02 Apr 2011 20:29:00 -0000</pubDate><category>markdown</category><category>Textile</category><category>BBCode</category><category>reStructuredText</category><category>Texy!</category><category>txt2tags</category><category>Creole</category><category>MediaWiki</category><category>marcado</category><category>HTML</category><category>XHTML</category></item></channel></rss>