<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>joe di castro</title><link href="http://joedicastro.com" rel="alternate"></link><link href="http://joedicastro.com/feeds/tags/Disqus.atom.xml" rel="self"></link><id>http://joedicastro.com</id><updated>2011-06-27T10:21:00Z</updated><entry><title>Pelican - Introducción e Instalación</title><link href="http://joedicastro.com/pelican-introduccion-e-instalacion.html" rel="alternate"></link><updated>2011-06-27T10:21:00Z</updated><author><name>joe di castro</name></author><id>tag:joedicastro.com,2011-06-27:/pelican-introduccion-e-instalacion.html/</id><summary type="html">&lt;p&gt;&lt;a href="http://docs.notmyidea.org/alexis/pelican/"&gt;Pelican&lt;/a&gt; es un generador de sitios web con contenido estático. Está orientado 
originalmente a la creación de blogs. &lt;strong&gt;Pelican&lt;/strong&gt; (Pelicano) es una anagrama de 
la palabra francesa &lt;em&gt;Calepin&lt;/em&gt; que significa en español "cuaderno de notas" 
(blog). Su creador y desarrollador principal es el programador francés 
&lt;a href="http://blog.notmyidea.org/"&gt;Alexis Métaireau&lt;/a&gt;. Y es la aplicación que genera el contenido para este 
blog. Personalmente le veo muchas ventajas frente a una plataforma de blogs 
convencional como Wordpress o Drupal, como ya comentaba en mi &lt;a href="http://joedicastro.com/de-drupal-a-pelican.html"&gt;anterior articulo&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Pelican genera este contenido estático (páginas HTML) a partir de ficheros de 
texto plano formateados en un lenguaje de marcado ligero como &lt;a href="http://es.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; o 
&lt;a href="http://es.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt;. También crea fuentes RSS y Atom de los artículos. Y 
dependiendo del tema empleado se pueden tener un archivo de los artículos 
publicados, clasificación por categorías, nube de etiquetas, un &lt;a href="http://es.wikipedia.org/wiki/Blogroll"&gt;blogroll&lt;/a&gt;, 
enlaces a redes sociales, botón para tweeter, paginación, traducciones, etc. 
Aunque viene un tema completo por defecto y están disponibles &lt;a href="https://github.com/ametaireau/pelican-themes"&gt;algunos más&lt;/a&gt;, 
se puede crear uno completamente personalizado desde cero. La creación de 
estos temas se basa en el sistema de plantillas &lt;a href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;, lo que nos 
permite una gran flexibilidad. También disponemos de varios scripts que nos 
proporcionan soporte para comentarios con &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; y de analíticas con 
&lt;a href="http://www.google.com/intl/es/analytics/"&gt;Google Analytics&lt;/a&gt; ó &lt;a href="http://piwik.org/"&gt;Piwik&lt;/a&gt;. También nos permite generar ficheros PDFs de 
los artículos automáticamente y mostrar los enlaces a ellos, siempre que los 
artículos se hayan creado con reStructuredText.&lt;/p&gt;
&lt;p&gt;Es un software muy joven, el primer commit en &lt;a href="https://github.com/ametaireau/pelican"&gt;GitHub&lt;/a&gt; data del 13 de Agosto de 
2010, pero que ha evolucionado bastante rápido y que aún sigue desarrollándose a 
un  buen ritmo. Es posible que por esto aún tenga alguna carencia o algún que 
otro fallo, pero su autor es muy receptivo y acepta de buena gana las sugerencias, 
informes de errores y colaboraciones de desarrollo. Cuenta con una documentación 
bastante decente y actualizada. Alguno que otra cosa no está documentada, pero 
lo veo normal dado el ritmo de desarrollo y de a quien va orientado un software 
como este. Es muy sencilla su instalación y su utilización cuando se ha leído 
esta, pero será mejor que lo explique con un ejemplo sobre la marcha.&lt;/p&gt;
&lt;h3 id="instalaci+n_para_linux"&gt;Instalación (para Linux)&lt;/h3&gt;
&lt;p&gt;La instalación del mismo es relativamente sencilla si no queremos complicarnos 
la vida, siempre tenemos la última versión disponible en el &lt;a href="http://pypi.python.org/pypi/pelican/2.7.2"&gt;PyPi&lt;/a&gt;. Así que 
instalarlo podría ser tan sencillo como esto:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; easy_install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aunque recomiendo emplear &lt;a href="http://www.pip-installer.org/en/latest/index.html"&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/a&gt; en lugar de &lt;code&gt;easy_install&lt;/code&gt;, de este modo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De todos modos desaconsejo emplear este método, me parece mejor solución, dada 
la velocidad de desarrollo del software, emplear un entorno virtual para su 
instalación. Un &lt;a href="http://www.virtualenv.org/en/latest/index.html"&gt;entorno virtual&lt;/a&gt; nos permite tener una versión de Python 
independiente de la del resto del sistema, con sus propias librerías y con el 
software instalado que nosotros deseemos. Todo esto solo estará disponible cuando 
nos encontremos dentro de este entorno virtual, sin afectar al resto del 
sistema. Y podemos eliminarlo o des/activarlo cuando deseemos. Es bastante más 
sencillo de utilizar de lo que parece y es realmente potente. &lt;/p&gt;
&lt;p&gt;Veamos, paso a paso, la forma en que yo lo instalaría.&lt;/p&gt;
&lt;p&gt;Creamos una carpeta que contendrá Pelican, el entorno virtual y el sitio que 
crearemos. Yo le daría el nombre de la URL del blog, por ejemplo, &lt;em&gt;myblog.com&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mdkir myblog.com
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;myblog.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descargamos la revisión actual del repositorio de Pelican en GitHub. Esto nos 
creara una carpeta llamada &lt;em&gt;pelican&lt;/em&gt; que contendrá una copia del repositorio en 
local (lo cual nos será muy útil en el futuro para actualizarlo). &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone git://github.com/ametaireau/pelican.git
&lt;span class="go"&gt;Cloning into pelican...&lt;/span&gt;
&lt;span class="go"&gt;remote: Counting objects: 2603, done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Compressing objects: 100% (1143/1143), done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Total 2603 (delta 1541), reused 2420 (delta 1374)&lt;/span&gt;
&lt;span class="go"&gt;Receiving objects: 100% (2603/2603), 687.30 KiB | 397 KiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Resolving deltas: 100% (1541/1541), done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear nuestro entorno virtual. En caso de no tener instalado &lt;code&gt;pip&lt;/code&gt; 
o &lt;code&gt;virtualenv&lt;/code&gt;, es rematadamente sencillo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; easy_install pip
&lt;span class="gp"&gt;$&lt;/span&gt; pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voy a llamar &lt;em&gt;env&lt;/em&gt; a nuestro entorno virtual. Lo creamos así.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; virtualenv env
&lt;span class="go"&gt;New python executable in env/bin/python&lt;/span&gt;
&lt;span class="go"&gt;Installing distribute...........................................................&lt;/span&gt;
&lt;span class="go"&gt;................................................................................&lt;/span&gt;
&lt;span class="go"&gt;.......................................done.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; ls
&lt;span class="go"&gt;env  pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora activaremos nuestro entorno virtual para "sumergirnos" dentro de él. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
&lt;span class="go"&gt;(env)$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que aparece el nombre del entorno virtual entre paréntesis antes de la 
línea del &lt;a href="http://es.wikipedia.org/wiki/Prompt"&gt;prompt&lt;/a&gt;. Eso quiere decir que 
nos encontramos dentro de este entorno virtual. Ahora procederemos a instalar 
Pelican. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;pelican/
&lt;span class="gp"&gt;$&lt;/span&gt; python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos ya instalado Pelican, &lt;strong&gt;solo dentro de nuestro entorno virtual&lt;/strong&gt;. 
Si probamos a llamar al programa fuera de él, veremos que no está disponible, 
luego necesitaremos activar este entorno cada vez que queramos emplearlo.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican
&lt;span class="go"&gt;CRITICAL: you need to specify a path containing the content (see pelican --help for &lt;/span&gt;
&lt;span class="go"&gt;more information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos da un error porque no le hemos pasado los parámetros necesarios. Ahora 
desactivamos el entorno y volvemos a llamar al programa y nos dice que no 
existe.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; deactivate
&lt;span class="gp"&gt;$&lt;/span&gt; pelican
&lt;span class="go"&gt;pelican: orden no encontrada&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tenemos ahora dentro de &lt;em&gt;myblog.com/&lt;/em&gt; dos directorios, &lt;em&gt;env&lt;/em&gt; y &lt;em&gt;pelican&lt;/em&gt;. 
Podríamos borrar ahora el directorio &lt;em&gt;pelican&lt;/em&gt; porque ya lo tenemos instalado 
dentro del entorno virtual, pero sería bueno conservarlo para poder actualizarlo 
en el futuro mediante &lt;code&gt;git pull&lt;/code&gt;. Yo crearía una tercer directorio, &lt;em&gt;site&lt;/em&gt; donde 
se alojaría nuestro sitio, organizado a su vez en tres subdirectorios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;: sería la carpeta donde alojaríamos los archivos de texto de 
nuestro blog y todo aquello que quisiéramos que formara parte de nuestro sitio: 
imágenes, fichero &lt;a href="http://es.wikipedia.org/wiki/Htaccess"&gt;.htacess&lt;/a&gt;, fichero &lt;a href="http://es.wikipedia.org/wiki/Robots.txt"&gt;robots.txt&lt;/a&gt;, páginas 
personalizadas...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;: El resultado del procesamiento de Pelican, es decir, nuestro blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;theme&lt;/strong&gt; : Sería el tema que usariamos para crear nuestro blog, en el 
 estarían las plantillas &lt;strong&gt;jinja2&lt;/strong&gt;, las hojas de estilo .css, el contenido 
 estático (iconos, imágenes), ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luego, lo haríamos así:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir -p site/source
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir site/output
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir site/theme
&lt;span class="gp"&gt;$&lt;/span&gt; ls site/
&lt;span class="go"&gt;output  source  theme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya está, tenemos instalado Pelican y creada nuestra estructura para empezar a 
trabajar con él. Para eso nada mejor que crear un primer sitio de ejemplo. 
Entramos en el entorno virtual y creamos el sitio que viene de ejemplo con 
Pelican:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
&lt;span class="gp"&gt;$&lt;/span&gt; pelican pelican/samples/content/ -o site/output -s pelican/samples/pelican.conf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora si abrimos el fichero &lt;code&gt;myblog.com/site/output/index.html&lt;/code&gt; en un 
navegador, veremos algo como esto (en la imagen se ve la categoría cat1 
seleccionada):&lt;/p&gt;
&lt;p style="text-align:center;"&gt;&lt;img src="pictures/sample_blog.png" 
alt="pelican sample blog" title="pelican sample blog" width=453 height=700 /&gt;&lt;/p&gt;

&lt;p&gt;Es así de fácil de emplear Pelican, simplemente especificarle el directorio donde 
está el origen del contenido, el directorio destino y el fichero de configuración. 
Aunque con el fichero de configuración correctamente creado, solo será necesario 
indicarle la ubicación del mismo. Para comprender mejor la estructura y como 
funciona Pelican, sería buena idea copiar el tema, el fichero de configuración y 
el contenido que han generado este sitio de ejemplo a la carpeta &lt;em&gt;site&lt;/em&gt; para no 
empezar nuestro blog desde cero.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp -r pelican/samples/content/* site/source
&lt;span class="gp"&gt;$&lt;/span&gt; cp -r pelican/pelican/themes/notmyidea/* site/theme/
&lt;span class="gp"&gt;$&lt;/span&gt; cp pelican/samples/pelican.conf.py site/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En próximos artículos veremos como crear artículos, publicar el sitio, 
personalizar el tema y automatizar todos estos procesos para hacerlo todo mucho 
más sencillo. &lt;/p&gt;</summary><category term="Pelican"></category><category term="python"></category><category term="markdown"></category><category term="reStructuredText"></category><category term="blog"></category><category term="HTML"></category><category term="Piwik"></category><category term="Disqus"></category></entry></feed>